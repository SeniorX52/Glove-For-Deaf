
GloveForDeaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000280  00800060  00001ef0  00001f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  008002e0  008002e0  00002204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054de  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d6  00000000  00000000  00007b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027a2  00000000  00000000  00008c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  0000b3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d11  00000000  00000000  0000bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000377a  00000000  00000000  0000ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  000101a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
      8a:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "ADC_private.h"


void ADC_init(u8 referenceVoltage)
{
	switch(referenceVoltage){
      92:	82 30       	cpi	r24, 0x02	; 2
      94:	59 f0       	breq	.+22     	; 0xac <ADC_init+0x1a>
      96:	83 30       	cpi	r24, 0x03	; 3
      98:	81 f0       	breq	.+32     	; 0xba <ADC_init+0x28>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	a1 f4       	brne	.+40     	; 0xc6 <ADC_init+0x34>
		case ADC_REFERENCE_AVCC:{
			SET_BIT(ADMUX,REFS0);
      9e:	87 b1       	in	r24, 0x07	; 7
      a0:	80 64       	ori	r24, 0x40	; 64
      a2:	87 b9       	out	0x07, r24	; 7
			CLR_BIT(ADMUX,REFS1);
      a4:	87 b1       	in	r24, 0x07	; 7
      a6:	8f 77       	andi	r24, 0x7F	; 127
      a8:	87 b9       	out	0x07, r24	; 7
			break;
      aa:	0d c0       	rjmp	.+26     	; 0xc6 <ADC_init+0x34>
		}
		case ADC_REFERENCE_AREF:{
			CLR_BIT(ADMUX,REFS0);
      ac:	87 b1       	in	r24, 0x07	; 7
      ae:	8f 7b       	andi	r24, 0xBF	; 191
      b0:	87 b9       	out	0x07, r24	; 7
			CLR_BIT(ADMUX,REFS1);
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 77       	andi	r24, 0x7F	; 127
      b6:	87 b9       	out	0x07, r24	; 7
			break;
      b8:	06 c0       	rjmp	.+12     	; 0xc6 <ADC_init+0x34>
		}
		case ADC_REFERENCE_INTERNAL:{
			SET_BIT(ADMUX,REFS0);
      ba:	87 b1       	in	r24, 0x07	; 7
      bc:	80 64       	ori	r24, 0x40	; 64
      be:	87 b9       	out	0x07, r24	; 7
			SET_BIT(ADMUX,REFS1);
      c0:	87 b1       	in	r24, 0x07	; 7
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	87 b9       	out	0x07, r24	; 7
			break;
		}
		
	}
	// Select Right Adjustment
	CLR_BIT(ADMUX,ADLAR);
      c6:	87 b1       	in	r24, 0x07	; 7
      c8:	8f 7d       	andi	r24, 0xDF	; 223
      ca:	87 b9       	out	0x07, r24	; 7

	// Single Conversation Mode
	CLR_BIT(ADCSRA,ADATE);
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	8f 7d       	andi	r24, 0xDF	; 223
      d0:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA,ADIE);
      d2:	86 b1       	in	r24, 0x06	; 6
      d4:	87 7f       	andi	r24, 0xF7	; 247
      d6:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA,ADPS2);
      d8:	86 b1       	in	r24, 0x06	; 6
      da:	84 60       	ori	r24, 0x04	; 4
      dc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
      de:	86 b1       	in	r24, 0x06	; 6
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS0);
      e4:	86 b1       	in	r24, 0x06	; 6
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA,ADEN);
      ea:	86 b1       	in	r24, 0x06	; 6
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	86 b9       	out	0x06, r24	; 6
      f0:	08 95       	ret

000000f2 <ADC_getDigitalValue>:
}


u16  ADC_getDigitalValue(u8 channelNum)
{
	if(channelNum<32)
      f2:	80 32       	cpi	r24, 0x20	; 32
      f4:	88 f4       	brcc	.+34     	; 0x118 <ADC_getDigitalValue+0x26>
	{
		//Clear ADMUX Channel Bits
		ADMUX &= 0xE0; //0b11100000, 1110->E (0000)->0
      f6:	97 b1       	in	r25, 0x07	; 7
      f8:	90 7e       	andi	r25, 0xE0	; 224
      fa:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number
		ADMUX |= channelNum;
      fc:	97 b1       	in	r25, 0x07	; 7
      fe:	89 2b       	or	r24, r25
     100:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversion
		SET_BIT(ADCSRA,ADSC);
     102:	86 b1       	in	r24, 0x06	; 6
     104:	80 64       	ori	r24, 0x40	; 64
     106:	86 b9       	out	0x06, r24	; 6
		// Busy wait on ADC flag
		while(GET_BIT(ADCSRA,ADIF)==0);
     108:	34 9b       	sbis	0x06, 4	; 6
     10a:	fe cf       	rjmp	.-4      	; 0x108 <ADC_getDigitalValue+0x16>
		// Clear Flag(write one to clear)
		SET_BIT(ADCSRA,ADIF);
     10c:	86 b1       	in	r24, 0x06	; 6
     10e:	80 61       	ori	r24, 0x10	; 16
     110:	86 b9       	out	0x06, r24	; 6
		return ADC_u16;
     112:	84 b1       	in	r24, 0x04	; 4
     114:	95 b1       	in	r25, 0x05	; 5
     116:	08 95       	ret
	}
	else
	{
		return 0;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
	}
     11c:	08 95       	ret

0000011e <DIO_setPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3)&&(PinId<=7)&&((PinDirection == DIO_PIN_INPUT)||(PinDirection == DIO_PIN_OUTPUT)))
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	08 f0       	brcs	.+2      	; 0x124 <DIO_setPinDirection+0x6>
     122:	72 c0       	rjmp	.+228    	; 0x208 <DIO_setPinDirection+0xea>
     124:	68 30       	cpi	r22, 0x08	; 8
     126:	08 f0       	brcs	.+2      	; 0x12a <DIO_setPinDirection+0xc>
     128:	6f c0       	rjmp	.+222    	; 0x208 <DIO_setPinDirection+0xea>
     12a:	42 30       	cpi	r20, 0x02	; 2
     12c:	08 f0       	brcs	.+2      	; 0x130 <DIO_setPinDirection+0x12>
     12e:	6c c0       	rjmp	.+216    	; 0x208 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	01 f1       	breq	.+64     	; 0x174 <DIO_setPinDirection+0x56>
     134:	30 f0       	brcs	.+12     	; 0x142 <DIO_setPinDirection+0x24>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	b1 f1       	breq	.+108    	; 0x1a6 <DIO_setPinDirection+0x88>
     13a:	83 30       	cpi	r24, 0x03	; 3
     13c:	09 f4       	brne	.+2      	; 0x140 <DIO_setPinDirection+0x22>
     13e:	4c c0       	rjmp	.+152    	; 0x1d8 <DIO_setPinDirection+0xba>
     140:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection) 
     142:	41 30       	cpi	r20, 0x01	; 1
     144:	59 f4       	brne	.+22     	; 0x15c <DIO_setPinDirection+0x3e>
			{
				SET_BIT(DDRA,PinId);
     146:	2a b3       	in	r18, 0x1a	; 26
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPinDirection+0x34>
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPinDirection+0x30>
     156:	82 2b       	or	r24, r18
     158:	8a bb       	out	0x1a, r24	; 26
     15a:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRA,PinId);
     15c:	2a b3       	in	r18, 0x1a	; 26
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_setPinDirection+0x4a>
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	6a 95       	dec	r22
     16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_setPinDirection+0x46>
     16c:	80 95       	com	r24
     16e:	82 23       	and	r24, r18
     170:	8a bb       	out	0x1a, r24	; 26
     172:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection) 
     174:	41 30       	cpi	r20, 0x01	; 1
     176:	59 f4       	brne	.+22     	; 0x18e <DIO_setPinDirection+0x70>
			{
				SET_BIT(DDRB,PinId);
     178:	27 b3       	in	r18, 0x17	; 23
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPinDirection+0x66>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	6a 95       	dec	r22
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPinDirection+0x62>
     188:	82 2b       	or	r24, r18
     18a:	87 bb       	out	0x17, r24	; 23
     18c:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB,PinId);
     18e:	27 b3       	in	r18, 0x17	; 23
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDirection+0x7c>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	6a 95       	dec	r22
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDirection+0x78>
     19e:	80 95       	com	r24
     1a0:	82 23       	and	r24, r18
     1a2:	87 bb       	out	0x17, r24	; 23
     1a4:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection) 
     1a6:	41 30       	cpi	r20, 0x01	; 1
     1a8:	59 f4       	brne	.+22     	; 0x1c0 <DIO_setPinDirection+0xa2>
			{
				SET_BIT(DDRC,PinId);
     1aa:	24 b3       	in	r18, 0x14	; 20
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_setPinDirection+0x98>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	6a 95       	dec	r22
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_setPinDirection+0x94>
     1ba:	82 2b       	or	r24, r18
     1bc:	84 bb       	out	0x14, r24	; 20
     1be:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRC,PinId);
     1c0:	24 b3       	in	r18, 0x14	; 20
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPinDirection+0xae>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	6a 95       	dec	r22
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPinDirection+0xaa>
     1d0:	80 95       	com	r24
     1d2:	82 23       	and	r24, r18
     1d4:	84 bb       	out	0x14, r24	; 20
     1d6:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection) 
     1d8:	41 30       	cpi	r20, 0x01	; 1
     1da:	59 f4       	brne	.+22     	; 0x1f2 <DIO_setPinDirection+0xd4>
			{
				SET_BIT(DDRD,PinId);
     1dc:	21 b3       	in	r18, 0x11	; 17
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_setPinDirection+0xca>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_setPinDirection+0xc6>
     1ec:	82 2b       	or	r24, r18
     1ee:	81 bb       	out	0x11, r24	; 17
     1f0:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRD,PinId);
     1f2:	21 b3       	in	r18, 0x11	; 17
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_setPinDirection+0xe0>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_setPinDirection+0xdc>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	81 bb       	out	0x11, r24	; 17
     208:	08 95       	ret

0000020a <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3)&&(PinId<=7)&&((PinValue == DIO_PIN_HIGH)||(PinValue == DIO_PIN_LOW)))
     20a:	84 30       	cpi	r24, 0x04	; 4
     20c:	08 f0       	brcs	.+2      	; 0x210 <DIO_setPinValue+0x6>
     20e:	72 c0       	rjmp	.+228    	; 0x2f4 <DIO_setPinValue+0xea>
     210:	68 30       	cpi	r22, 0x08	; 8
     212:	08 f0       	brcs	.+2      	; 0x216 <DIO_setPinValue+0xc>
     214:	6f c0       	rjmp	.+222    	; 0x2f4 <DIO_setPinValue+0xea>
     216:	42 30       	cpi	r20, 0x02	; 2
     218:	08 f0       	brcs	.+2      	; 0x21c <DIO_setPinValue+0x12>
     21a:	6c c0       	rjmp	.+216    	; 0x2f4 <DIO_setPinValue+0xea>
	{
		switch(PortId)
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	01 f1       	breq	.+64     	; 0x260 <DIO_setPinValue+0x56>
     220:	30 f0       	brcs	.+12     	; 0x22e <DIO_setPinValue+0x24>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	b1 f1       	breq	.+108    	; 0x292 <DIO_setPinValue+0x88>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	09 f4       	brne	.+2      	; 0x22c <DIO_setPinValue+0x22>
     22a:	4c c0       	rjmp	.+152    	; 0x2c4 <DIO_setPinValue+0xba>
     22c:	08 95       	ret
		{
			case DIO_PORTA:
			if(PinValue == DIO_PIN_HIGH)
     22e:	41 30       	cpi	r20, 0x01	; 1
     230:	59 f4       	brne	.+22     	; 0x248 <DIO_setPinValue+0x3e>
			{
				SET_BIT(PORTA,PinId);
     232:	2b b3       	in	r18, 0x1b	; 27
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinValue+0x34>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinValue+0x30>
     242:	82 2b       	or	r24, r18
     244:	8b bb       	out	0x1b, r24	; 27
     246:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinId);
     248:	2b b3       	in	r18, 0x1b	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_setPinValue+0x4a>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_setPinValue+0x46>
     258:	80 95       	com	r24
     25a:	82 23       	and	r24, r18
     25c:	8b bb       	out	0x1b, r24	; 27
     25e:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			if(PinValue == DIO_PIN_HIGH)
     260:	41 30       	cpi	r20, 0x01	; 1
     262:	59 f4       	brne	.+22     	; 0x27a <DIO_setPinValue+0x70>
			{
				SET_BIT(PORTB,PinId);
     264:	28 b3       	in	r18, 0x18	; 24
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_setPinValue+0x66>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_setPinValue+0x62>
     274:	82 2b       	or	r24, r18
     276:	88 bb       	out	0x18, r24	; 24
     278:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinId);
     27a:	28 b3       	in	r18, 0x18	; 24
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_setPinValue+0x7c>
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_setPinValue+0x78>
     28a:	80 95       	com	r24
     28c:	82 23       	and	r24, r18
     28e:	88 bb       	out	0x18, r24	; 24
     290:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			if(PinValue == DIO_PIN_HIGH)
     292:	41 30       	cpi	r20, 0x01	; 1
     294:	59 f4       	brne	.+22     	; 0x2ac <DIO_setPinValue+0xa2>
			{
				SET_BIT(PORTC,PinId);
     296:	25 b3       	in	r18, 0x15	; 21
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_setPinValue+0x98>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_setPinValue+0x94>
     2a6:	82 2b       	or	r24, r18
     2a8:	85 bb       	out	0x15, r24	; 21
     2aa:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinId);
     2ac:	25 b3       	in	r18, 0x15	; 21
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_setPinValue+0xae>
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_setPinValue+0xaa>
     2bc:	80 95       	com	r24
     2be:	82 23       	and	r24, r18
     2c0:	85 bb       	out	0x15, r24	; 21
     2c2:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			if(PinValue == DIO_PIN_HIGH)
     2c4:	41 30       	cpi	r20, 0x01	; 1
     2c6:	59 f4       	brne	.+22     	; 0x2de <DIO_setPinValue+0xd4>
			{
				SET_BIT(PORTD,PinId);
     2c8:	22 b3       	in	r18, 0x12	; 18
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_setPinValue+0xca>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	6a 95       	dec	r22
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_setPinValue+0xc6>
     2d8:	82 2b       	or	r24, r18
     2da:	82 bb       	out	0x12, r24	; 18
     2dc:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinId);
     2de:	22 b3       	in	r18, 0x12	; 18
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_setPinValue+0xe0>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_setPinValue+0xdc>
     2ee:	80 95       	com	r24
     2f0:	82 23       	and	r24, r18
     2f2:	82 bb       	out	0x12, r24	; 18
     2f4:	08 95       	ret

000002f6 <DIO_getPinValue>:
}


u8 DIO_getPinValue(u8 PortId, u8 PinId)
{
	if((PortId<=3)&&(PinId<=7))
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	70 f5       	brcc	.+92     	; 0x356 <DIO_getPinValue+0x60>
     2fa:	68 30       	cpi	r22, 0x08	; 8
     2fc:	70 f5       	brcc	.+92     	; 0x35a <DIO_getPinValue+0x64>
	{
		switch(PortId)
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	79 f0       	breq	.+30     	; 0x320 <DIO_getPinValue+0x2a>
     302:	28 f0       	brcs	.+10     	; 0x30e <DIO_getPinValue+0x18>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	a9 f0       	breq	.+42     	; 0x332 <DIO_getPinValue+0x3c>
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	e1 f0       	breq	.+56     	; 0x344 <DIO_getPinValue+0x4e>
     30c:	28 c0       	rjmp	.+80     	; 0x35e <DIO_getPinValue+0x68>
		{
			case DIO_PORTA:
			return (GET_BIT(PINA,PinId));
     30e:	89 b3       	in	r24, 0x19	; 25
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_getPinValue+0x22>
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	6a 95       	dec	r22
     31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_getPinValue+0x1e>
     31c:	81 70       	andi	r24, 0x01	; 1
     31e:	08 95       	ret
			break;
			
			case DIO_PORTB:
			return (GET_BIT(PINB,PinId));
     320:	86 b3       	in	r24, 0x16	; 22
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_getPinValue+0x34>
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_getPinValue+0x30>
     32e:	81 70       	andi	r24, 0x01	; 1
     330:	08 95       	ret
			break;
			
			case DIO_PORTC:
			return (GET_BIT(PINC,PinId));
     332:	83 b3       	in	r24, 0x13	; 19
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_getPinValue+0x46>
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	6a 95       	dec	r22
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_getPinValue+0x42>
     340:	81 70       	andi	r24, 0x01	; 1
     342:	08 95       	ret
			break;
			
			case DIO_PORTD:
			return (GET_BIT(PIND,PinId));
     344:	80 b3       	in	r24, 0x10	; 16
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_getPinValue+0x58>
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_getPinValue+0x54>
     352:	81 70       	andi	r24, 0x01	; 1
     354:	08 95       	ret
	}
	else
	{
		// Do Nothing
	}
	return 0;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	08 95       	ret
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	08 95       	ret
     35e:	80 e0       	ldi	r24, 0x00	; 0
}
     360:	08 95       	ret

00000362 <EEPROM_init>:
		}
		TWI_sendStopCondition();
		// Self-timed Write Cycle delay
		_delay_ms(5);
	}
}
     362:	0e 94 bc 0c 	call	0x1978	; 0x1978 <TWI_initMaster>
     366:	08 95       	ret

00000368 <EEPROM_writeByte>:
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	d8 2f       	mov	r29, r24
     370:	19 2f       	mov	r17, r25
     372:	c6 2f       	mov	r28, r22
     374:	0e 94 c8 0c 	call	0x1990	; 0x1990 <TWI_sendStartCondition>
     378:	81 2f       	mov	r24, r17
     37a:	80 65       	ori	r24, 0x50	; 80
     37c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <TWI_sendSlaveAddWithWrite>
     380:	8d 2f       	mov	r24, r29
     382:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <TWI_sendMasterDataByte>
     386:	8c 2f       	mov	r24, r28
     388:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <TWI_sendMasterDataByte>
     38c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TWI_sendStopCondition>
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	9e e4       	ldi	r25, 0x4E	; 78
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <EEPROM_writeByte+0x2c>
     398:	00 c0       	rjmp	.+0      	; 0x39a <EEPROM_writeByte+0x32>
     39a:	00 00       	nop
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	08 95       	ret

000003a4 <EEPROM_readByte>:
void EEPROM_readByte	(u16 wordAddress,u8* data){
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
	if(data!=NULL){
     3ac:	61 15       	cp	r22, r1
     3ae:	71 05       	cpc	r23, r1
     3b0:	e1 f0       	breq	.+56     	; 0x3ea <EEPROM_readByte+0x46>
     3b2:	8b 01       	movw	r16, r22
     3b4:	c9 2f       	mov	r28, r25
     3b6:	d8 2f       	mov	r29, r24
		TWI_sendStartCondition();
     3b8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <TWI_sendStartCondition>
		u8 slaveAddress=(wordAddress>>8)|EEPROM_FIXED_ADDRESS;
     3bc:	c0 65       	ori	r28, 0x50	; 80
		//Dummy write
		TWI_sendSlaveAddWithWrite(slaveAddress);
     3be:	8c 2f       	mov	r24, r28
     3c0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <TWI_sendSlaveAddWithWrite>
		u8 word=(u8)wordAddress;
		TWI_sendMasterDataByte(word);
     3c4:	8d 2f       	mov	r24, r29
     3c6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <TWI_sendMasterDataByte>
		TWI_sendRepStartCondition();
     3ca:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <TWI_sendRepStartCondition>
		TWI_sendSlaveAddWithRead(slaveAddress);
     3ce:	8c 2f       	mov	r24, r28
     3d0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <TWI_sendSlaveAddWithRead>
		TWI_receiveMasterDataByteWithNack(data);
     3d4:	c8 01       	movw	r24, r16
     3d6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <TWI_receiveMasterDataByteWithNack>
		TWI_sendStopCondition();
     3da:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TWI_sendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3de:	8f e1       	ldi	r24, 0x1F	; 31
     3e0:	9e e4       	ldi	r25, 0x4E	; 78
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <EEPROM_readByte+0x3e>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <EEPROM_readByte+0x44>
     3e8:	00 00       	nop
		// Self-timed Write Cycle delay
		_delay_ms(5);
	}
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <GloveForDeaf_init>:
	
	
}
void GloveForDeaf_sendPostureSentence(u8 posture){
	if(posture!=POSTURENON){
		UART_sendString(speechSentences[posture]);
     3f4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Glove_init>
     3f8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <LCD_init>
     3fc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <UART_init>
     400:	0e 94 b1 01 	call	0x362	; 0x362 <EEPROM_init>
     404:	08 95       	ret

00000406 <GloveForDeaf_getFingerValues>:
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	1f c0       	rjmp	.+62     	; 0x44e <GloveForDeaf_getFingerValues+0x48>
     410:	c1 2f       	mov	r28, r17
     412:	d0 e0       	ldi	r29, 0x00	; 0
     414:	fe 01       	movw	r30, r28
     416:	e9 5d       	subi	r30, 0xD9	; 217
     418:	fd 4f       	sbci	r31, 0xFD	; 253
     41a:	80 81       	ld	r24, Z
     41c:	0e 94 6a 07 	call	0xed4	; 0xed4 <Glove_getFingerValue>
     420:	bc 01       	movw	r22, r24
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__floatunsisf>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	44 e3       	ldi	r20, 0x34	; 52
     430:	53 e4       	ldi	r21, 0x43	; 67
     432:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__divsf3>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 ee       	ldi	r20, 0xE0	; 224
     43c:	50 e4       	ldi	r21, 0x40	; 64
     43e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
     442:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixunssfsi>
     446:	cc 56       	subi	r28, 0x6C	; 108
     448:	dc 4f       	sbci	r29, 0xFC	; 252
     44a:	68 83       	st	Y, r22
     44c:	1f 5f       	subi	r17, 0xFF	; 255
     44e:	15 30       	cpi	r17, 0x05	; 5
     450:	f8 f2       	brcs	.-66     	; 0x410 <GloveForDeaf_getFingerValues+0xa>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	08 95       	ret

0000045a <GloveForDeaf_displayFingerValues>:
     45a:	cf 93       	push	r28
     45c:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	0f c0       	rjmp	.+30     	; 0x48a <GloveForDeaf_displayFingerValues+0x30>
     46c:	ec 2f       	mov	r30, r28
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	ec 56       	subi	r30, 0x6C	; 108
     472:	fc 4f       	sbci	r31, 0xFC	; 252
     474:	60 81       	ld	r22, Z
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
     480:	81 ea       	ldi	r24, 0xA1	; 161
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     488:	cf 5f       	subi	r28, 0xFF	; 255
     48a:	c3 30       	cpi	r28, 0x03	; 3
     48c:	78 f3       	brcs	.-34     	; 0x46c <GloveForDeaf_displayFingerValues+0x12>
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
     496:	c3 e0       	ldi	r28, 0x03	; 3
     498:	0f c0       	rjmp	.+30     	; 0x4b8 <GloveForDeaf_displayFingerValues+0x5e>
     49a:	ec 2f       	mov	r30, r28
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ec 56       	subi	r30, 0x6C	; 108
     4a0:	fc 4f       	sbci	r31, 0xFC	; 252
     4a2:	60 81       	ld	r22, Z
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
     4ae:	81 ea       	ldi	r24, 0xA1	; 161
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     4b6:	cf 5f       	subi	r28, 0xFF	; 255
     4b8:	c5 30       	cpi	r28, 0x05	; 5
     4ba:	78 f3       	brcs	.-34     	; 0x49a <GloveForDeaf_displayFingerValues+0x40>
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <GloveForDeaf_getSpeechPosture>:
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	4b c0       	rjmp	.+150    	; 0x55c <GloveForDeaf_getSpeechPosture+0x9c>
     4c6:	fc 01       	movw	r30, r24
     4c8:	ec 56       	subi	r30, 0x6C	; 108
     4ca:	fc 4f       	sbci	r31, 0xFC	; 252
     4cc:	60 81       	ld	r22, Z
     4ce:	fa 01       	movw	r30, r20
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e4 0f       	add	r30, r20
     4da:	f5 1f       	adc	r31, r21
     4dc:	e2 50       	subi	r30, 0x02	; 2
     4de:	fd 4f       	sbci	r31, 0xFD	; 253
     4e0:	e8 0f       	add	r30, r24
     4e2:	f9 1f       	adc	r31, r25
     4e4:	a0 81       	ld	r26, Z
     4e6:	6a 17       	cp	r22, r26
     4e8:	88 f4       	brcc	.+34     	; 0x50c <GloveForDeaf_getSpeechPosture+0x4c>
     4ea:	9a 01       	movw	r18, r20
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	f9 01       	movw	r30, r18
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	e2 0f       	add	r30, r18
     4fc:	f3 1f       	adc	r31, r19
     4fe:	e2 50       	subi	r30, 0x02	; 2
     500:	fd 4f       	sbci	r31, 0xFD	; 253
     502:	e8 0f       	add	r30, r24
     504:	f9 1f       	adc	r31, r25
     506:	20 81       	ld	r18, Z
     508:	62 17       	cp	r22, r18
     50a:	30 f1       	brcs	.+76     	; 0x558 <GloveForDeaf_getSpeechPosture+0x98>
     50c:	a6 17       	cp	r26, r22
     50e:	88 f4       	brcc	.+34     	; 0x532 <GloveForDeaf_getSpeechPosture+0x72>
     510:	9a 01       	movw	r18, r20
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	f9 01       	movw	r30, r18
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	e2 0f       	add	r30, r18
     522:	f3 1f       	adc	r31, r19
     524:	e2 50       	subi	r30, 0x02	; 2
     526:	fd 4f       	sbci	r31, 0xFD	; 253
     528:	e8 0f       	add	r30, r24
     52a:	f9 1f       	adc	r31, r25
     52c:	20 81       	ld	r18, Z
     52e:	26 17       	cp	r18, r22
     530:	98 f0       	brcs	.+38     	; 0x558 <GloveForDeaf_getSpeechPosture+0x98>
     532:	7f 5f       	subi	r23, 0xFF	; 255
     534:	75 30       	cpi	r23, 0x05	; 5
     536:	39 f4       	brne	.+14     	; 0x546 <GloveForDeaf_getSpeechPosture+0x86>
     538:	ca 01       	movw	r24, r20
     53a:	99 23       	and	r25, r25
     53c:	0c f4       	brge	.+2      	; 0x540 <GloveForDeaf_getSpeechPosture+0x80>
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	95 95       	asr	r25
     542:	87 95       	ror	r24
     544:	08 95       	ret
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	03 c0       	rjmp	.+6      	; 0x550 <GloveForDeaf_getSpeechPosture+0x90>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	85 30       	cpi	r24, 0x05	; 5
     552:	91 05       	cpc	r25, r1
     554:	0c f4       	brge	.+2      	; 0x558 <GloveForDeaf_getSpeechPosture+0x98>
     556:	b7 cf       	rjmp	.-146    	; 0x4c6 <GloveForDeaf_getSpeechPosture+0x6>
     558:	4e 5f       	subi	r20, 0xFE	; 254
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	4e 31       	cpi	r20, 0x1E	; 30
     55e:	51 05       	cpc	r21, r1
     560:	a4 f3       	brlt	.-24     	; 0x54a <GloveForDeaf_getSpeechPosture+0x8a>
     562:	84 e3       	ldi	r24, 0x34	; 52
     564:	08 95       	ret

00000566 <GloveForDeaf_printSpeechPosture>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	84 33       	cpi	r24, 0x34	; 52
     56c:	99 f0       	breq	.+38     	; 0x594 <GloveForDeaf_printSpeechPosture+0x2e>
     56e:	c8 2f       	mov	r28, r24
     570:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	c8 9f       	mul	r28, r24
     580:	e0 01       	movw	r28, r0
     582:	11 24       	eor	r1, r1
     584:	c0 5a       	subi	r28, 0xA0	; 160
     586:	df 4f       	sbci	r29, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <UART_sendString>
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <GloveForDeaf_getControlPosture>:
     59a:	cf 93       	push	r28
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	47 c0       	rjmp	.+142    	; 0x62e <GloveForDeaf_getControlPosture+0x94>
     5a0:	49 2f       	mov	r20, r25
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	fa 01       	movw	r30, r20
     5a6:	ec 56       	subi	r30, 0x6C	; 108
     5a8:	fc 4f       	sbci	r31, 0xFC	; 252
     5aa:	a0 81       	ld	r26, Z
     5ac:	28 2f       	mov	r18, r24
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	e2 0f       	add	r30, r18
     5bc:	f3 1f       	adc	r31, r19
     5be:	e0 52       	subi	r30, 0x20	; 32
     5c0:	fd 4f       	sbci	r31, 0xFD	; 253
     5c2:	e4 0f       	add	r30, r20
     5c4:	f5 1f       	adc	r31, r21
     5c6:	c0 81       	ld	r28, Z
     5c8:	ac 17       	cp	r26, r28
     5ca:	88 f4       	brcc	.+34     	; 0x5ee <GloveForDeaf_getControlPosture+0x54>
     5cc:	b9 01       	movw	r22, r18
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	fb 01       	movw	r30, r22
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	e6 0f       	add	r30, r22
     5de:	f7 1f       	adc	r31, r23
     5e0:	e0 52       	subi	r30, 0x20	; 32
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	e4 0f       	add	r30, r20
     5e6:	f5 1f       	adc	r31, r21
     5e8:	60 81       	ld	r22, Z
     5ea:	a6 17       	cp	r26, r22
     5ec:	f8 f0       	brcs	.+62     	; 0x62c <GloveForDeaf_getControlPosture+0x92>
     5ee:	ca 17       	cp	r28, r26
     5f0:	88 f4       	brcc	.+34     	; 0x614 <GloveForDeaf_getControlPosture+0x7a>
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	b9 01       	movw	r22, r18
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	66 0f       	add	r22, r22
     5fe:	77 1f       	adc	r23, r23
     600:	26 0f       	add	r18, r22
     602:	37 1f       	adc	r19, r23
     604:	20 52       	subi	r18, 0x20	; 32
     606:	3d 4f       	sbci	r19, 0xFD	; 253
     608:	f9 01       	movw	r30, r18
     60a:	e4 0f       	add	r30, r20
     60c:	f5 1f       	adc	r31, r21
     60e:	20 81       	ld	r18, Z
     610:	2a 17       	cp	r18, r26
     612:	60 f0       	brcs	.+24     	; 0x62c <GloveForDeaf_getControlPosture+0x92>
     614:	bf 5f       	subi	r27, 0xFF	; 255
     616:	b5 30       	cpi	r27, 0x05	; 5
     618:	11 f4       	brne	.+4      	; 0x61e <GloveForDeaf_getControlPosture+0x84>
     61a:	86 95       	lsr	r24
     61c:	0b c0       	rjmp	.+22     	; 0x634 <GloveForDeaf_getControlPosture+0x9a>
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	02 c0       	rjmp	.+4      	; 0x626 <GloveForDeaf_getControlPosture+0x8c>
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	95 30       	cpi	r25, 0x05	; 5
     628:	08 f4       	brcc	.+2      	; 0x62c <GloveForDeaf_getControlPosture+0x92>
     62a:	ba cf       	rjmp	.-140    	; 0x5a0 <GloveForDeaf_getControlPosture+0x6>
     62c:	8e 5f       	subi	r24, 0xFE	; 254
     62e:	86 30       	cpi	r24, 0x06	; 6
     630:	c0 f3       	brcs	.-16     	; 0x622 <GloveForDeaf_getControlPosture+0x88>
     632:	84 e3       	ldi	r24, 0x34	; 52
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <GloveForDeaf_sendFingerValues>:
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	8b e7       	ldi	r24, 0x7B	; 123
     63e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
     642:	c0 e0       	ldi	r28, 0x00	; 0
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	0d c0       	rjmp	.+26     	; 0x662 <GloveForDeaf_sendFingerValues+0x2a>
     648:	fe 01       	movw	r30, r28
     64a:	ec 56       	subi	r30, 0x6C	; 108
     64c:	fc 4f       	sbci	r31, 0xFC	; 252
     64e:	60 81       	ld	r22, Z
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <UART_sendNumber>
     65a:	8c e2       	ldi	r24, 0x2C	; 44
     65c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	c4 30       	cpi	r28, 0x04	; 4
     664:	d1 05       	cpc	r29, r1
     666:	84 f3       	brlt	.-32     	; 0x648 <GloveForDeaf_sendFingerValues+0x10>
     668:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <fingerValues+0x4>
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <UART_sendNumber>
     676:	8d e7       	ldi	r24, 0x7D	; 125
     678:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <GloveForDeaf_getPasswordDigit>:
		LCD_writeNumber(digit);
		LCD_writeString((u8*)" ");
	}
}
u8 GloveForDeaf_getPasswordDigit(u8 finger){
	return (u8)(((double)(fingerValues[finger])) / MAX_FINGER_VALUE * MAX_PASSWORD_VALUE);
     682:	e8 2f       	mov	r30, r24
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ec 56       	subi	r30, 0x6C	; 108
     688:	fc 4f       	sbci	r31, 0xFC	; 252
     68a:	60 81       	ld	r22, Z
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__floatunsisf>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 ee       	ldi	r20, 0xE0	; 224
     69c:	50 e4       	ldi	r21, 0x40	; 64
     69e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__divsf3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e1       	ldi	r20, 0x10	; 16
     6a8:	51 e4       	ldi	r21, 0x41	; 65
     6aa:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
     6ae:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixunssfsi>
     6b2:	86 2f       	mov	r24, r22
}
     6b4:	08 95       	ret

000006b6 <GloveForDeaf_displayFingerValuesPASS>:
void GloveForDeaf_sendPostureSentence(u8 posture){
	if(posture!=POSTURENON){
		UART_sendString(speechSentences[posture]);
	}
}
void GloveForDeaf_displayFingerValuesPASS(void){
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
	LCD_goToSpecificPosition(LCD_LINE_TWO,3);
     6ba:	63 e0       	ldi	r22, 0x03	; 3
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	for(int i=0;i<FINGERS_NUMBER;i++){;
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
     6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <GloveForDeaf_displayFingerValuesPASS+0x2e>
		//Convert motion range to 0~9 according to possible range of motion
		u8 digit =GloveForDeaf_getPasswordDigit(i);
     6c8:	8c 2f       	mov	r24, r28
     6ca:	0e 94 41 03 	call	0x682	; 0x682 <GloveForDeaf_getPasswordDigit>
		LCD_writeNumber(digit);
     6ce:	68 2f       	mov	r22, r24
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
		LCD_writeString((u8*)" ");
     6da:	81 ea       	ldi	r24, 0xA1	; 161
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
		UART_sendString(speechSentences[posture]);
	}
}
void GloveForDeaf_displayFingerValuesPASS(void){
	LCD_goToSpecificPosition(LCD_LINE_TWO,3);
	for(int i=0;i<FINGERS_NUMBER;i++){;
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	c5 30       	cpi	r28, 0x05	; 5
     6e6:	d1 05       	cpc	r29, r1
     6e8:	7c f3       	brlt	.-34     	; 0x6c8 <GloveForDeaf_displayFingerValuesPASS+0x12>
		//Convert motion range to 0~9 according to possible range of motion
		u8 digit =GloveForDeaf_getPasswordDigit(i);
		LCD_writeNumber(digit);
		LCD_writeString((u8*)" ");
	}
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <GloveForDeaf_passwordCheck>:
	UART_sendNumber(fingerValues[FINGERS_NUMBER-1]);
	UART_TxChar('}');
	
}

void GloveForDeaf_passwordCheck(void){
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
	while(1){
		LCD_clear();
     6f4:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
		LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
		LCD_writeString((u8*)"Enter Password");
     700:	80 e5       	ldi	r24, 0x50	; 80
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
		GloveForDeaf_getFingerValues();
     708:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
		GloveForDeaf_displayFingerValuesPASS();
     70c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GloveForDeaf_displayFingerValuesPASS>
		u8 counter=0;
		for(u8 i=0;i<FINGERS_NUMBER;i++){
     710:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_clear();
		LCD_goToSpecificPosition(LCD_LINE_ONE,0);
		LCD_writeString((u8*)"Enter Password");
		GloveForDeaf_getFingerValues();
		GloveForDeaf_displayFingerValuesPASS();
		u8 counter=0;
     712:	d0 e0       	ldi	r29, 0x00	; 0
		for(u8 i=0;i<FINGERS_NUMBER;i++){
     714:	0c c0       	rjmp	.+24     	; 0x72e <GloveForDeaf_passwordCheck+0x3e>
			u8 digit =GloveForDeaf_getPasswordDigit(i);
     716:	8c 2f       	mov	r24, r28
     718:	0e 94 41 03 	call	0x682	; 0x682 <GloveForDeaf_getPasswordDigit>
			if(digit==PASSWORD[i]){
     71c:	ec 2f       	mov	r30, r28
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	e7 56       	subi	r30, 0x67	; 103
     722:	fc 4f       	sbci	r31, 0xFC	; 252
     724:	90 81       	ld	r25, Z
     726:	89 13       	cpse	r24, r25
     728:	01 c0       	rjmp	.+2      	; 0x72c <GloveForDeaf_passwordCheck+0x3c>
				counter++;
     72a:	df 5f       	subi	r29, 0xFF	; 255
		LCD_goToSpecificPosition(LCD_LINE_ONE,0);
		LCD_writeString((u8*)"Enter Password");
		GloveForDeaf_getFingerValues();
		GloveForDeaf_displayFingerValuesPASS();
		u8 counter=0;
		for(u8 i=0;i<FINGERS_NUMBER;i++){
     72c:	cf 5f       	subi	r28, 0xFF	; 255
     72e:	c5 30       	cpi	r28, 0x05	; 5
     730:	90 f3       	brcs	.-28     	; 0x716 <GloveForDeaf_passwordCheck+0x26>
			u8 digit =GloveForDeaf_getPasswordDigit(i);
			if(digit==PASSWORD[i]){
				counter++;
			}
		}
		if(counter==5){
     732:	d5 30       	cpi	r29, 0x05	; 5
     734:	69 f4       	brne	.+26     	; 0x750 <GloveForDeaf_passwordCheck+0x60>
			//Password correct
			LCD_clear();
     736:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
			LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
			LCD_writeString((u8*)"Welcome to SmartGlove v1.4");
     742:	8f e5       	ldi	r24, 0x5F	; 95
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
			LCD_clear();
     74a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
		}
		_delay_ms(LCD_LATENCY);
	}
	
	
}
     74e:	0a c0       	rjmp	.+20     	; 0x764 <GloveForDeaf_passwordCheck+0x74>
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	81 ee       	ldi	r24, 0xE1	; 225
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	21 50       	subi	r18, 0x01	; 1
     758:	80 40       	sbci	r24, 0x00	; 0
     75a:	90 40       	sbci	r25, 0x00	; 0
     75c:	e1 f7       	brne	.-8      	; 0x756 <GloveForDeaf_passwordCheck+0x66>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <GloveForDeaf_passwordCheck+0x70>
     760:	00 00       	nop
     762:	c8 cf       	rjmp	.-112    	; 0x6f4 <GloveForDeaf_passwordCheck+0x4>
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <GloveForDeaf_saveCurrentValues>:
	}
}
u8 GloveForDeaf_getPasswordDigit(u8 finger){
	return (u8)(((double)(fingerValues[finger])) / MAX_FINGER_VALUE * MAX_PASSWORD_VALUE);
}
void GloveForDeaf_saveCurrentValues(u8 profile,u16 position){
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	8b 01       	movw	r16, r22
	if(profile==PROFILE2){
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	11 f4       	brne	.+4      	; 0x77a <GloveForDeaf_saveCurrentValues+0x10>
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*FINGERS_NUMBER*2;
     776:	0c 54       	subi	r16, 0x4C	; 76
     778:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}
u8 GloveForDeaf_getPasswordDigit(u8 finger){
	return (u8)(((double)(fingerValues[finger])) / MAX_FINGER_VALUE * MAX_PASSWORD_VALUE);
}
void GloveForDeaf_saveCurrentValues(u8 profile,u16 position){
     77a:	c0 e0       	ldi	r28, 0x00	; 0
     77c:	0b c0       	rjmp	.+22     	; 0x794 <GloveForDeaf_saveCurrentValues+0x2a>
	if(profile==PROFILE2){
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*FINGERS_NUMBER*2;
	}
	for(u8 i=0;i<FINGERS_NUMBER;i++){
		EEPROM_writeByte(position,fingerValues[i]);
     77e:	ec 2f       	mov	r30, r28
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ec 56       	subi	r30, 0x6C	; 108
     784:	fc 4f       	sbci	r31, 0xFC	; 252
     786:	60 81       	ld	r22, Z
     788:	c8 01       	movw	r24, r16
     78a:	0e 94 b4 01 	call	0x368	; 0x368 <EEPROM_writeByte>
		position++;
     78e:	0f 5f       	subi	r16, 0xFF	; 255
     790:	1f 4f       	sbci	r17, 0xFF	; 255
}
void GloveForDeaf_saveCurrentValues(u8 profile,u16 position){
	if(profile==PROFILE2){
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*FINGERS_NUMBER*2;
	}
	for(u8 i=0;i<FINGERS_NUMBER;i++){
     792:	cf 5f       	subi	r28, 0xFF	; 255
     794:	c5 30       	cpi	r28, 0x05	; 5
     796:	98 f3       	brcs	.-26     	; 0x77e <GloveForDeaf_saveCurrentValues+0x14>
		EEPROM_writeByte(position,fingerValues[i]);
		position++;
	}
}
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <GloveForDeaf_checkOverlap>:
	LCD_shift(LCD_SHIFT_RIGHT);
	_delay_ms(2000);
	LCD_clear();
}

u8 GloveForDeaf_checkOverlap(u8 profile,u16 position,u8 isControl){
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	2a 97       	sbiw	r28, 0x0a	; 10
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	6b 01       	movw	r12, r22
	u8 overlapFlag=0;
	u16 memoryPosition=0;
	u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
	if(profile==PROFILE2){
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	31 f4       	brne	.+12     	; 0x7d0 <GloveForDeaf_checkOverlap+0x30>
		memoryPosition+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
		position+=memoryPosition;
     7c4:	24 eb       	ldi	r18, 0xB4	; 180
     7c6:	c2 0e       	add	r12, r18
     7c8:	d1 1c       	adc	r13, r1
u8 GloveForDeaf_checkOverlap(u8 profile,u16 position,u8 isControl){
	u8 overlapFlag=0;
	u16 memoryPosition=0;
	u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
	if(profile==PROFILE2){
		memoryPosition+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
     7ca:	84 eb       	ldi	r24, 0xB4	; 180
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <GloveForDeaf_checkOverlap+0x34>
	LCD_clear();
}

u8 GloveForDeaf_checkOverlap(u8 profile,u16 position,u8 isControl){
	u8 overlapFlag=0;
	u16 memoryPosition=0;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
	u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
	if(profile==PROFILE2){
		memoryPosition+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
		position+=memoryPosition;
	}
	if(isControl==1){
     7d4:	41 30       	cpi	r20, 0x01	; 1
     7d6:	11 f4       	brne	.+4      	; 0x7dc <GloveForDeaf_checkOverlap+0x3c>
		memoryPosition+=SPEECH_POSTURES_USED_NUMBER*memoryStepSize;
     7d8:	8a 56       	subi	r24, 0x6A	; 106
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
	}
	u8 countOverlapped=0;
	//Comment this if you don't want min & max ranges to be equal
	if(position>memoryPosition){
     7dc:	8c 15       	cp	r24, r12
     7de:	9d 05       	cpc	r25, r13
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <GloveForDeaf_checkOverlap+0x44>
     7e2:	65 c0       	rjmp	.+202    	; 0x8ae <__stack+0x4f>
		position-=FINGERS_NUMBER;
     7e4:	35 e0       	ldi	r19, 0x05	; 5
     7e6:	c3 1a       	sub	r12, r19
     7e8:	d1 08       	sbc	r13, r1
     7ea:	61 c0       	rjmp	.+194    	; 0x8ae <__stack+0x4f>
	}
	while(memoryPosition<position){
		u8 min[5]={0,0,0,0,0};
     7ec:	25 e0       	ldi	r18, 0x05	; 5
     7ee:	fe 01       	movw	r30, r28
     7f0:	36 96       	adiw	r30, 0x06	; 6
     7f2:	df 01       	movw	r26, r30
     7f4:	32 2f       	mov	r19, r18
     7f6:	1d 92       	st	X+, r1
     7f8:	3a 95       	dec	r19
     7fa:	e9 f7       	brne	.-6      	; 0x7f6 <GloveForDeaf_checkOverlap+0x56>
		u8 max[5]={0,0,0,0,0};
     7fc:	35 97       	sbiw	r30, 0x05	; 5
     7fe:	df 01       	movw	r26, r30
     800:	1d 92       	st	X+, r1
     802:	2a 95       	dec	r18
     804:	e9 f7       	brne	.-6      	; 0x800 <__DATA_REGION_LENGTH__>
		for(u8 c=0;c<10;c++){
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	22 c0       	rjmp	.+68     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			if(c<5){
     80a:	15 30       	cpi	r17, 0x05	; 5
     80c:	70 f4       	brcc	.+28     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				EEPROM_readByte(memoryPosition++,&min[c]);
     80e:	7c 01       	movw	r14, r24
     810:	bf ef       	ldi	r27, 0xFF	; 255
     812:	eb 1a       	sub	r14, r27
     814:	fb 0a       	sbc	r15, r27
     816:	66 e0       	ldi	r22, 0x06	; 6
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	6c 0f       	add	r22, r28
     81c:	7d 1f       	adc	r23, r29
     81e:	61 0f       	add	r22, r17
     820:	71 1d       	adc	r23, r1
     822:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EEPROM_readByte>
     826:	c7 01       	movw	r24, r14
     828:	11 c0       	rjmp	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			}
			else{
				EEPROM_readByte(memoryPosition++,&max[c-5]);
     82a:	61 2f       	mov	r22, r17
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	65 50       	subi	r22, 0x05	; 5
     830:	71 09       	sbc	r23, r1
     832:	7c 01       	movw	r14, r24
     834:	2f ef       	ldi	r18, 0xFF	; 255
     836:	e2 1a       	sub	r14, r18
     838:	f2 0a       	sbc	r15, r18
     83a:	a1 e0       	ldi	r26, 0x01	; 1
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	ac 0f       	add	r26, r28
     840:	bd 1f       	adc	r27, r29
     842:	6a 0f       	add	r22, r26
     844:	7b 1f       	adc	r23, r27
     846:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EEPROM_readByte>
     84a:	c7 01       	movw	r24, r14
		position-=FINGERS_NUMBER;
	}
	while(memoryPosition<position){
		u8 min[5]={0,0,0,0,0};
		u8 max[5]={0,0,0,0,0};
		for(u8 c=0;c<10;c++){
     84c:	1f 5f       	subi	r17, 0xFF	; 255
     84e:	1a 30       	cpi	r17, 0x0A	; 10
     850:	e0 f2       	brcs	.-72     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	25 c0       	rjmp	.+74     	; 0x8a2 <__stack+0x43>
			else{
				EEPROM_readByte(memoryPosition++,&max[c-5]);
			}
		}
		for(u8 c=0;c<5;c++){
			if((fingerValues[c] < min[c] && fingerValues[c] < max[c]) ||
     858:	24 2f       	mov	r18, r20
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	ec 56       	subi	r30, 0x6C	; 108
     860:	fc 4f       	sbci	r31, 0xFC	; 252
     862:	50 81       	ld	r21, Z
     864:	e6 e0       	ldi	r30, 0x06	; 6
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	e2 0f       	add	r30, r18
     86e:	f3 1f       	adc	r31, r19
     870:	60 81       	ld	r22, Z
     872:	56 17       	cp	r21, r22
     874:	48 f4       	brcc	.+18     	; 0x888 <__stack+0x29>
     876:	e1 e0       	ldi	r30, 0x01	; 1
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	ec 0f       	add	r30, r28
     87c:	fd 1f       	adc	r31, r29
     87e:	e2 0f       	add	r30, r18
     880:	f3 1f       	adc	r31, r19
     882:	e0 81       	ld	r30, Z
     884:	5e 17       	cp	r21, r30
     886:	78 f0       	brcs	.+30     	; 0x8a6 <__stack+0x47>
     888:	65 17       	cp	r22, r21
     88a:	48 f4       	brcc	.+18     	; 0x89e <__stack+0x3f>
		(fingerValues[c] > min[c] && fingerValues[c] > max[c])){
     88c:	e1 e0       	ldi	r30, 0x01	; 1
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	e2 0f       	add	r30, r18
     896:	f3 1f       	adc	r31, r19
     898:	20 81       	ld	r18, Z
     89a:	25 17       	cp	r18, r21
     89c:	20 f0       	brcs	.+8      	; 0x8a6 <__stack+0x47>
				break;
			}
			else{
				countOverlapped++;
     89e:	7f 5f       	subi	r23, 0xFF	; 255
			}
			else{
				EEPROM_readByte(memoryPosition++,&max[c-5]);
			}
		}
		for(u8 c=0;c<5;c++){
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	45 30       	cpi	r20, 0x05	; 5
     8a4:	c8 f2       	brcs	.-78     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			}
			else{
				countOverlapped++;
			}
		}
		if(countOverlapped==FINGERS_NUMBER){
     8a6:	75 30       	cpi	r23, 0x05	; 5
     8a8:	11 f4       	brne	.+4      	; 0x8ae <__stack+0x4f>
			overlapFlag=1;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__stack+0x59>
	u8 countOverlapped=0;
	//Comment this if you don't want min & max ranges to be equal
	if(position>memoryPosition){
		position-=FINGERS_NUMBER;
	}
	while(memoryPosition<position){
     8ae:	8c 15       	cp	r24, r12
     8b0:	9d 05       	cpc	r25, r13
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	9b cf       	rjmp	.-202    	; 0x7ec <GloveForDeaf_checkOverlap+0x4c>
	_delay_ms(2000);
	LCD_clear();
}

u8 GloveForDeaf_checkOverlap(u8 profile,u16 position,u8 isControl){
	u8 overlapFlag=0;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		countOverlapped=0;
	}
	return overlapFlag;
}
     8b8:	2a 96       	adiw	r28, 0x0a	; 10
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <GloveForDeaf_createNewProfile>:
	for(u8 i=0;i<FINGERS_NUMBER;i++){
		EEPROM_writeByte(position,fingerValues[i]);
		position++;
	}
}
void GloveForDeaf_createNewProfile(u8 profile){
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	d8 2f       	mov	r29, r24
	//For simulation, record your values from UART terminal
	//by uncommenting the following UART functions
	LCD_clear();
     8ee:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_writeString((u8*)"Press button 0 for calibration");
     8f2:	8a e7       	ldi	r24, 0x7A	; 122
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	u8 memoryStepSize=FINGERS_NUMBER;
	u16 memoryPosition=0;
	for(u8 i=0;i<SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER;i++){
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
	//For simulation, record your values from UART terminal
	//by uncommenting the following UART functions
	LCD_clear();
	LCD_writeString((u8*)"Press button 0 for calibration");
	u8 memoryStepSize=FINGERS_NUMBER;
	u16 memoryPosition=0;
     8fc:	e1 2c       	mov	r14, r1
     8fe:	f1 2c       	mov	r15, r1
	for(u8 i=0;i<SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER;i++){
     900:	f1 c0       	rjmp	.+482    	; 0xae4 <GloveForDeaf_createNewProfile+0x210>
		//-------------------------------MIN-----------------------------
		while (1)
		{
			u8 isControl=0;
			u8 overlapFlag=0;
			LCD_clear();
     902:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
			if(i>=SPEECH_POSTURES_USED_NUMBER){
     906:	cf 30       	cpi	r28, 0x0F	; 15
     908:	d8 f0       	brcs	.+54     	; 0x940 <GloveForDeaf_createNewProfile+0x6c>
				LCD_writeString((u8*)"Control: ");
     90a:	89 e9       	ldi	r24, 0x99	; 153
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
				UART_sendString((u8*)"Control: ");
     912:	89 e9       	ldi	r24, 0x99	; 153
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <UART_sendString>
				LCD_writeNumber((i-SPEECH_POSTURES_USED_NUMBER));
     91a:	8c 2e       	mov	r8, r28
     91c:	91 2c       	mov	r9, r1
     91e:	2f e0       	ldi	r18, 0x0F	; 15
     920:	82 1a       	sub	r8, r18
     922:	91 08       	sbc	r9, r1
     924:	09 2c       	mov	r0, r9
     926:	00 0c       	add	r0, r0
     928:	aa 08       	sbc	r10, r10
     92a:	bb 08       	sbc	r11, r11
     92c:	c5 01       	movw	r24, r10
     92e:	b4 01       	movw	r22, r8
     930:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
				UART_sendNumber((i-SPEECH_POSTURES_USED_NUMBER));
     934:	c5 01       	movw	r24, r10
     936:	b4 01       	movw	r22, r8
     938:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <UART_sendNumber>
				isControl=1;
     93c:	11 e0       	ldi	r17, 0x01	; 1
     93e:	0d c0       	rjmp	.+26     	; 0x95a <GloveForDeaf_createNewProfile+0x86>
			}
			else{
				LCD_writeString(speechSentences[i]);
     940:	80 e1       	ldi	r24, 0x10	; 16
     942:	c8 9f       	mul	r28, r24
     944:	80 01       	movw	r16, r0
     946:	11 24       	eor	r1, r1
     948:	00 5a       	subi	r16, 0xA0	; 160
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
				UART_sendString((u8*)speechSentences[i]);
     952:	c8 01       	movw	r24, r16
     954:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <UART_sendString>
	for(u8 i=0;i<SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER;i++){
		
		//-------------------------------MIN-----------------------------
		while (1)
		{
			u8 isControl=0;
     958:	10 e0       	ldi	r17, 0x00	; 0
			}
			else{
				LCD_writeString(speechSentences[i]);
				UART_sendString((u8*)speechSentences[i]);
			}
			LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
			LCD_writeString((u8*)"Min->");
     962:	83 ea       	ldi	r24, 0xA3	; 163
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	2d e3       	ldi	r18, 0x3D	; 61
     96e:	89 e4       	ldi	r24, 0x49	; 73
     970:	91 50       	subi	r25, 0x01	; 1
     972:	20 40       	sbci	r18, 0x00	; 0
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <GloveForDeaf_createNewProfile+0x9c>
     978:	00 c0       	rjmp	.+0      	; 0x97a <GloveForDeaf_createNewProfile+0xa6>
     97a:	00 00       	nop
     97c:	0d c0       	rjmp	.+26     	; 0x998 <GloveForDeaf_createNewProfile+0xc4>
			//Busy wait till button 0 is pressed
			_delay_ms(1500);
			while(Kit_pushButton_isPressed(BUTTON0)==0){
				GloveForDeaf_getFingerValues();
     97e:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
				GloveForDeaf_displayFingerValues();
     982:	0e 94 2d 02 	call	0x45a	; 0x45a <GloveForDeaf_displayFingerValues>
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	21 ee       	ldi	r18, 0xE1	; 225
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	91 50       	subi	r25, 0x01	; 1
     98e:	20 40       	sbci	r18, 0x00	; 0
     990:	80 40       	sbci	r24, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <GloveForDeaf_createNewProfile+0xb8>
     994:	00 c0       	rjmp	.+0      	; 0x996 <GloveForDeaf_createNewProfile+0xc2>
     996:	00 00       	nop
			}
			LCD_goToSpecificPosition(LCD_LINE_TWO,0);
			LCD_writeString((u8*)"Min->");
			//Busy wait till button 0 is pressed
			_delay_ms(1500);
			while(Kit_pushButton_isPressed(BUTTON0)==0){
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
     99e:	88 23       	and	r24, r24
     9a0:	71 f3       	breq	.-36     	; 0x97e <GloveForDeaf_createNewProfile+0xaa>
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
     9a4:	25 ea       	ldi	r18, 0xA5	; 165
     9a6:	8e e0       	ldi	r24, 0x0E	; 14
     9a8:	91 50       	subi	r25, 0x01	; 1
     9aa:	20 40       	sbci	r18, 0x00	; 0
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <GloveForDeaf_createNewProfile+0xd4>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <GloveForDeaf_createNewProfile+0xde>
     9b2:	00 00       	nop
				GloveForDeaf_getFingerValues();
				GloveForDeaf_displayFingerValues();
				_delay_ms(LCD_LATENCY);
			}
			_delay_ms(PUSH_BUTTON_LATENCY);
			overlapFlag=GloveForDeaf_checkOverlap(profile,memoryPosition,isControl);
     9b4:	41 2f       	mov	r20, r17
     9b6:	b7 01       	movw	r22, r14
     9b8:	8d 2f       	mov	r24, r29
     9ba:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GloveForDeaf_checkOverlap>
			if(overlapFlag){
     9be:	88 23       	and	r24, r24
     9c0:	a1 f0       	breq	.+40     	; 0x9ea <GloveForDeaf_createNewProfile+0x116>
				LCD_clear();
     9c2:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
				LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
				LCD_writeString((u8*)"Try again: Overlapped positions");
     9ce:	89 ea       	ldi	r24, 0xA9	; 169
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	23 ed       	ldi	r18, 0xD3	; 211
     9da:	80 e3       	ldi	r24, 0x30	; 48
     9dc:	91 50       	subi	r25, 0x01	; 1
     9de:	20 40       	sbci	r18, 0x00	; 0
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <GloveForDeaf_createNewProfile+0x108>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <GloveForDeaf_createNewProfile+0x112>
     9e6:	00 00       	nop
     9e8:	8c cf       	rjmp	.-232    	; 0x902 <GloveForDeaf_createNewProfile+0x2e>
			}
			else{
				break;
			}
		}
		GloveForDeaf_sendFingerValues();
     9ea:	0e 94 1c 03 	call	0x638	; 0x638 <GloveForDeaf_sendFingerValues>
		GloveForDeaf_saveCurrentValues(profile,memoryPosition);
     9ee:	b7 01       	movw	r22, r14
     9f0:	8d 2f       	mov	r24, r29
     9f2:	0e 94 b5 03 	call	0x76a	; 0x76a <GloveForDeaf_saveCurrentValues>
		memoryPosition+=memoryStepSize;
     9f6:	67 01       	movw	r12, r14
     9f8:	95 e0       	ldi	r25, 0x05	; 5
     9fa:	c9 0e       	add	r12, r25
     9fc:	d1 1c       	adc	r13, r1
		
		while (1)
		{
			u8 overlapFlag=0;
			u8 isControl=0;
			LCD_clear();
     9fe:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
			LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
			if(i>=SPEECH_POSTURES_USED_NUMBER){
     a0a:	cf 30       	cpi	r28, 0x0F	; 15
     a0c:	80 f0       	brcs	.+32     	; 0xa2e <GloveForDeaf_createNewProfile+0x15a>
				LCD_writeString((u8*)"Control: ");
     a0e:	89 e9       	ldi	r24, 0x99	; 153
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
				LCD_writeNumber((i-SPEECH_POSTURES_USED_NUMBER));
     a16:	6c 2f       	mov	r22, r28
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	6f 50       	subi	r22, 0x0F	; 15
     a1c:	71 09       	sbc	r23, r1
     a1e:	07 2e       	mov	r0, r23
     a20:	00 0c       	add	r0, r0
     a22:	88 0b       	sbc	r24, r24
     a24:	99 0b       	sbc	r25, r25
     a26:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
				isControl=1;
     a2a:	11 e0       	ldi	r17, 0x01	; 1
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <GloveForDeaf_createNewProfile+0x16c>
			}
			else{
				LCD_writeString(speechSentences[i]);
     a2e:	20 e1       	ldi	r18, 0x10	; 16
     a30:	c2 9f       	mul	r28, r18
     a32:	c0 01       	movw	r24, r0
     a34:	11 24       	eor	r1, r1
     a36:	80 5a       	subi	r24, 0xA0	; 160
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
		//-------------------------------MAX-----------------------------
		
		while (1)
		{
			u8 overlapFlag=0;
			u8 isControl=0;
     a3e:	10 e0       	ldi	r17, 0x00	; 0
				isControl=1;
			}
			else{
				LCD_writeString(speechSentences[i]);
			}
			LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
			LCD_writeString((u8*)"Max->");
     a48:	89 ec       	ldi	r24, 0xC9	; 201
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	9d e3       	ldi	r25, 0x3D	; 61
     a54:	29 e4       	ldi	r18, 0x49	; 73
     a56:	81 50       	subi	r24, 0x01	; 1
     a58:	90 40       	sbci	r25, 0x00	; 0
     a5a:	20 40       	sbci	r18, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <GloveForDeaf_createNewProfile+0x182>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <GloveForDeaf_createNewProfile+0x18c>
     a60:	00 00       	nop
     a62:	0d c0       	rjmp	.+26     	; 0xa7e <GloveForDeaf_createNewProfile+0x1aa>
			_delay_ms(1500);
			while(Kit_pushButton_isPressed(BUTTON0)==0){
				GloveForDeaf_getFingerValues();
     a64:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
				GloveForDeaf_displayFingerValues();
     a68:	0e 94 2d 02 	call	0x45a	; 0x45a <GloveForDeaf_displayFingerValues>
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	91 ee       	ldi	r25, 0xE1	; 225
     a70:	24 e0       	ldi	r18, 0x04	; 4
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	20 40       	sbci	r18, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <GloveForDeaf_createNewProfile+0x19e>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <GloveForDeaf_createNewProfile+0x1a8>
     a7c:	00 00       	nop
				LCD_writeString(speechSentences[i]);
			}
			LCD_goToSpecificPosition(LCD_LINE_TWO,0);
			LCD_writeString((u8*)"Max->");
			_delay_ms(1500);
			while(Kit_pushButton_isPressed(BUTTON0)==0){
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
     a84:	88 23       	and	r24, r24
     a86:	71 f3       	breq	.-36     	; 0xa64 <GloveForDeaf_createNewProfile+0x190>
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	95 ea       	ldi	r25, 0xA5	; 165
     a8c:	2e e0       	ldi	r18, 0x0E	; 14
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	90 40       	sbci	r25, 0x00	; 0
     a92:	20 40       	sbci	r18, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <GloveForDeaf_createNewProfile+0x1ba>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <GloveForDeaf_createNewProfile+0x1c4>
     a98:	00 00       	nop
				GloveForDeaf_getFingerValues();
				GloveForDeaf_displayFingerValues();
				_delay_ms(LCD_LATENCY);
			}
			_delay_ms(PUSH_BUTTON_LATENCY);
			overlapFlag=GloveForDeaf_checkOverlap(profile,memoryPosition,isControl);
     a9a:	41 2f       	mov	r20, r17
     a9c:	b6 01       	movw	r22, r12
     a9e:	8d 2f       	mov	r24, r29
     aa0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <GloveForDeaf_checkOverlap>
			if(overlapFlag){
     aa4:	88 23       	and	r24, r24
     aa6:	a1 f0       	breq	.+40     	; 0xad0 <GloveForDeaf_createNewProfile+0x1fc>
				LCD_clear();
     aa8:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
				LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
				LCD_writeString((u8*)"Try again: Overlapped positions");
     ab4:	89 ea       	ldi	r24, 0xA9	; 169
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	93 ed       	ldi	r25, 0xD3	; 211
     ac0:	20 e3       	ldi	r18, 0x30	; 48
     ac2:	81 50       	subi	r24, 0x01	; 1
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	20 40       	sbci	r18, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <GloveForDeaf_createNewProfile+0x1ee>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <GloveForDeaf_createNewProfile+0x1f8>
     acc:	00 00       	nop
     ace:	97 cf       	rjmp	.-210    	; 0x9fe <GloveForDeaf_createNewProfile+0x12a>
			}
			else{
				break;
			}
		}
		GloveForDeaf_sendFingerValues();
     ad0:	0e 94 1c 03 	call	0x638	; 0x638 <GloveForDeaf_sendFingerValues>
		GloveForDeaf_saveCurrentValues(profile,memoryPosition);
     ad4:	b6 01       	movw	r22, r12
     ad6:	8d 2f       	mov	r24, r29
     ad8:	0e 94 b5 03 	call	0x76a	; 0x76a <GloveForDeaf_saveCurrentValues>
		memoryPosition+=memoryStepSize;
     adc:	8a e0       	ldi	r24, 0x0A	; 10
     ade:	e8 0e       	add	r14, r24
     ae0:	f1 1c       	adc	r15, r1
	//by uncommenting the following UART functions
	LCD_clear();
	LCD_writeString((u8*)"Press button 0 for calibration");
	u8 memoryStepSize=FINGERS_NUMBER;
	u16 memoryPosition=0;
	for(u8 i=0;i<SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER;i++){
     ae2:	cf 5f       	subi	r28, 0xFF	; 255
     ae4:	c2 31       	cpi	r28, 0x12	; 18
     ae6:	08 f4       	brcc	.+2      	; 0xaea <GloveForDeaf_createNewProfile+0x216>
     ae8:	0c cf       	rjmp	.-488    	; 0x902 <GloveForDeaf_createNewProfile+0x2e>
		GloveForDeaf_saveCurrentValues(profile,memoryPosition);
		memoryPosition+=memoryStepSize;
		//----------------------------------------------------------------
	}
	//Display: profile (n) created!
	LCD_clear();
     aea:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_writeString((u8*)"Profile ");
     aee:	8f ec       	ldi	r24, 0xCF	; 207
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_writeNumber(profile);
     af6:	6d 2f       	mov	r22, r29
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
	LCD_writeString((u8*)" created!");
     b02:	88 ed       	ldi	r24, 0xD8	; 216
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     b0a:	9f ef       	ldi	r25, 0xFF	; 255
     b0c:	29 e6       	ldi	r18, 0x69	; 105
     b0e:	88 e1       	ldi	r24, 0x18	; 24
     b10:	91 50       	subi	r25, 0x01	; 1
     b12:	20 40       	sbci	r18, 0x00	; 0
     b14:	80 40       	sbci	r24, 0x00	; 0
     b16:	e1 f7       	brne	.-8      	; 0xb10 <GloveForDeaf_createNewProfile+0x23c>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <GloveForDeaf_createNewProfile+0x246>
     b1a:	00 00       	nop
	_delay_ms(500);
	LCD_shift(LCD_SHIFT_RIGHT);
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_shift>
	LCD_shift(LCD_SHIFT_RIGHT);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_shift>
     b28:	9f ef       	ldi	r25, 0xFF	; 255
     b2a:	27 ea       	ldi	r18, 0xA7	; 167
     b2c:	81 e6       	ldi	r24, 0x61	; 97
     b2e:	91 50       	subi	r25, 0x01	; 1
     b30:	20 40       	sbci	r18, 0x00	; 0
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <GloveForDeaf_createNewProfile+0x25a>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <GloveForDeaf_createNewProfile+0x264>
     b38:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
     b3a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	9f 90       	pop	r9
     b54:	8f 90       	pop	r8
     b56:	08 95       	ret

00000b58 <GloveForDeaf_loadValues>:
	LCD_shift(LCD_SHIFT_RIGHT);
	_delay_ms(2000);
	LCD_clear();
}

void GloveForDeaf_loadValues(u8 profile,u8* array,u16 position){
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	7b 01       	movw	r14, r22
     b64:	8a 01       	movw	r16, r20
	if(profile==PROFILE2){
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	11 f4       	brne	.+4      	; 0xb6e <GloveForDeaf_loadValues+0x16>
		u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
     b6a:	0c 54       	subi	r16, 0x4C	; 76
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
	LCD_shift(LCD_SHIFT_RIGHT);
	_delay_ms(2000);
	LCD_clear();
}

void GloveForDeaf_loadValues(u8 profile,u8* array,u16 position){
     b6e:	c0 e0       	ldi	r28, 0x00	; 0
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <GloveForDeaf_loadValues+0x2c>
	if(profile==PROFILE2){
		u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
	}
	for(u8 i=0;i<FINGERS_NUMBER;i++){
		EEPROM_readByte(position,&array[i]);
     b72:	b7 01       	movw	r22, r14
     b74:	6c 0f       	add	r22, r28
     b76:	71 1d       	adc	r23, r1
     b78:	c8 01       	movw	r24, r16
     b7a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EEPROM_readByte>
		position++;
     b7e:	0f 5f       	subi	r16, 0xFF	; 255
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
void GloveForDeaf_loadValues(u8 profile,u8* array,u16 position){
	if(profile==PROFILE2){
		u8 memoryStepSize=FINGERS_NUMBER*2;//Min & Max-->*2
		position+=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*memoryStepSize;
	}
	for(u8 i=0;i<FINGERS_NUMBER;i++){
     b82:	cf 5f       	subi	r28, 0xFF	; 255
     b84:	c5 30       	cpi	r28, 0x05	; 5
     b86:	a8 f3       	brcs	.-22     	; 0xb72 <GloveForDeaf_loadValues+0x1a>
		EEPROM_readByte(position,&array[i]);
		position++;
	}
}
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	08 95       	ret

00000b94 <GloveForDeaf_loadProfile>:
		}
		countOverlapped=0;
	}
	return overlapFlag;
}
void GloveForDeaf_loadProfile(u8 profile){
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	08 2f       	mov	r16, r24
	u16 memoryPosition=0;
	u8 memoryStepSize=FINGERS_NUMBER;
	LCD_clear();
     ba2:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"Loading...");
     bae:	82 ee       	ldi	r24, 0xE2	; 226
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	for(u8 i=0;i<(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*2;i+=2){
     bb6:	10 e0       	ldi	r17, 0x00	; 0
		countOverlapped=0;
	}
	return overlapFlag;
}
void GloveForDeaf_loadProfile(u8 profile){
	u16 memoryPosition=0;
     bb8:	e1 2c       	mov	r14, r1
     bba:	f1 2c       	mov	r15, r1
	u8 memoryStepSize=FINGERS_NUMBER;
	LCD_clear();
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"Loading...");
	for(u8 i=0;i<(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*2;i+=2){
     bbc:	4b c0       	rjmp	.+150    	; 0xc54 <GloveForDeaf_loadProfile+0xc0>
		if(i>=SPEECH_POSTURES_USED_NUMBER*2){
     bbe:	1e 31       	cpi	r17, 0x1E	; 30
     bc0:	20 f1       	brcs	.+72     	; 0xc0a <GloveForDeaf_loadProfile+0x76>
			//Load control values
			GloveForDeaf_loadValues(profile,controlRange[(i-SPEECH_POSTURES_USED_NUMBER*2)],memoryPosition);
     bc2:	c1 2f       	mov	r28, r17
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	4e 97       	sbiw	r24, 0x1e	; 30
     bca:	bc 01       	movw	r22, r24
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	66 0f       	add	r22, r22
     bd2:	77 1f       	adc	r23, r23
     bd4:	68 0f       	add	r22, r24
     bd6:	79 1f       	adc	r23, r25
     bd8:	60 52       	subi	r22, 0x20	; 32
     bda:	7d 4f       	sbci	r23, 0xFD	; 253
     bdc:	a7 01       	movw	r20, r14
     bde:	80 2f       	mov	r24, r16
     be0:	0e 94 ac 05 	call	0xb58	; 0xb58 <GloveForDeaf_loadValues>
			memoryPosition+=memoryStepSize;
     be4:	25 e0       	ldi	r18, 0x05	; 5
     be6:	e2 0e       	add	r14, r18
     be8:	f1 1c       	adc	r15, r1
			GloveForDeaf_loadValues(profile,controlRange[(i-SPEECH_POSTURES_USED_NUMBER*2)+1],memoryPosition);
     bea:	6d 97       	sbiw	r28, 0x1d	; 29
     bec:	be 01       	movw	r22, r28
     bee:	66 0f       	add	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	c6 0f       	add	r28, r22
     bf8:	d7 1f       	adc	r29, r23
     bfa:	be 01       	movw	r22, r28
     bfc:	60 52       	subi	r22, 0x20	; 32
     bfe:	7d 4f       	sbci	r23, 0xFD	; 253
     c00:	a7 01       	movw	r20, r14
     c02:	80 2f       	mov	r24, r16
     c04:	0e 94 ac 05 	call	0xb58	; 0xb58 <GloveForDeaf_loadValues>
     c08:	21 c0       	rjmp	.+66     	; 0xc4c <GloveForDeaf_loadProfile+0xb8>
		}
		else{
			GloveForDeaf_loadValues(profile,speechRange[i],memoryPosition);
     c0a:	c1 2f       	mov	r28, r17
     c0c:	d0 e0       	ldi	r29, 0x00	; 0
     c0e:	be 01       	movw	r22, r28
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	66 0f       	add	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	6c 0f       	add	r22, r28
     c1a:	7d 1f       	adc	r23, r29
     c1c:	62 50       	subi	r22, 0x02	; 2
     c1e:	7d 4f       	sbci	r23, 0xFD	; 253
     c20:	a7 01       	movw	r20, r14
     c22:	80 2f       	mov	r24, r16
     c24:	0e 94 ac 05 	call	0xb58	; 0xb58 <GloveForDeaf_loadValues>
			memoryPosition+=memoryStepSize;
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	e8 0e       	add	r14, r24
     c2c:	f1 1c       	adc	r15, r1
			GloveForDeaf_loadValues(profile,speechRange[i+1],memoryPosition);
     c2e:	21 96       	adiw	r28, 0x01	; 1
     c30:	be 01       	movw	r22, r28
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	66 0f       	add	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	c6 0f       	add	r28, r22
     c3c:	d7 1f       	adc	r29, r23
     c3e:	be 01       	movw	r22, r28
     c40:	62 50       	subi	r22, 0x02	; 2
     c42:	7d 4f       	sbci	r23, 0xFD	; 253
     c44:	a7 01       	movw	r20, r14
     c46:	80 2f       	mov	r24, r16
     c48:	0e 94 ac 05 	call	0xb58	; 0xb58 <GloveForDeaf_loadValues>
		}
		memoryPosition+=memoryStepSize;
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	e9 0e       	add	r14, r25
     c50:	f1 1c       	adc	r15, r1
	u16 memoryPosition=0;
	u8 memoryStepSize=FINGERS_NUMBER;
	LCD_clear();
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"Loading...");
	for(u8 i=0;i<(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*2;i+=2){
     c52:	1e 5f       	subi	r17, 0xFE	; 254
     c54:	14 32       	cpi	r17, 0x24	; 36
     c56:	08 f4       	brcc	.+2      	; 0xc5a <GloveForDeaf_loadProfile+0xc6>
     c58:	b2 cf       	rjmp	.-156    	; 0xbbe <GloveForDeaf_loadProfile+0x2a>
			GloveForDeaf_loadValues(profile,speechRange[i+1],memoryPosition);
		}
		memoryPosition+=memoryStepSize;
	}
	//Display: profile (n) loaded!
	LCD_clear();
     c5a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_writeString((u8*)"Profile ");
     c5e:	8f ec       	ldi	r24, 0xCF	; 207
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_writeNumber(profile);
     c66:	60 2f       	mov	r22, r16
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
	LCD_writeString((u8*)" loaded!");
     c72:	8d ee       	ldi	r24, 0xED	; 237
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	89 e6       	ldi	r24, 0x69	; 105
     c7e:	98 e1       	ldi	r25, 0x18	; 24
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	80 40       	sbci	r24, 0x00	; 0
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <GloveForDeaf_loadProfile+0xec>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <GloveForDeaf_loadProfile+0xf6>
     c8a:	00 00       	nop
	_delay_ms(500);
	LCD_shift(LCD_SHIFT_RIGHT);
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_shift>
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	87 ea       	ldi	r24, 0xA7	; 167
     c96:	91 e6       	ldi	r25, 0x61	; 97
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <GloveForDeaf_loadProfile+0x104>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <GloveForDeaf_loadProfile+0x10e>
     ca2:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
     ca4:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <GloveForDeaf_setCallBackControl>:
		EEPROM_readByte(position,&array[i]);
		position++;
	}
}
void GloveForDeaf_setCallBackControl(void (*ptrToFun)(void),u8 control){
	switch(control){
     cb6:	61 30       	cpi	r22, 0x01	; 1
     cb8:	49 f0       	breq	.+18     	; 0xccc <GloveForDeaf_setCallBackControl+0x16>
     cba:	18 f0       	brcs	.+6      	; 0xcc2 <GloveForDeaf_setCallBackControl+0xc>
     cbc:	62 30       	cpi	r22, 0x02	; 2
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <GloveForDeaf_setCallBackControl+0x20>
     cc0:	08 95       	ret
		case CONTROL0:
		{
			private_pCallBackC0 = ptrToFun;
     cc2:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <private_pCallBackC0+0x1>
     cc6:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <private_pCallBackC0>
			break;
     cca:	08 95       	ret
		}
		case CONTROL1:
		{
			private_pCallBackC1 = ptrToFun;
     ccc:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <private_pCallBackC1+0x1>
     cd0:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <private_pCallBackC1>
			break;
     cd4:	08 95       	ret
		}
		case CONTROL2:
		{
			private_pCallBackC2 = ptrToFun;
     cd6:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <private_pCallBackC2+0x1>
     cda:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <private_pCallBackC2>
     cde:	08 95       	ret

00000ce0 <GloveForDeaf_executeControl>:
		}
	}
}

void GloveForDeaf_executeControl(u8 posture){
	if(posture!=POSTURENON){
     ce0:	84 33       	cpi	r24, 0x34	; 52
     ce2:	e9 f0       	breq	.+58     	; 0xd1e <GloveForDeaf_executeControl+0x3e>
		switch(posture){
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	61 f0       	breq	.+24     	; 0xd00 <GloveForDeaf_executeControl+0x20>
     ce8:	18 f0       	brcs	.+6      	; 0xcf0 <GloveForDeaf_executeControl+0x10>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	89 f0       	breq	.+34     	; 0xd10 <GloveForDeaf_executeControl+0x30>
     cee:	08 95       	ret
			case CONTROL0:
			{
				if(private_pCallBackC0!=NULL){
     cf0:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <private_pCallBackC0>
     cf4:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <private_pCallBackC0+0x1>
     cf8:	30 97       	sbiw	r30, 0x00	; 0
     cfa:	89 f0       	breq	.+34     	; 0xd1e <GloveForDeaf_executeControl+0x3e>
					private_pCallBackC0();
     cfc:	09 95       	icall
     cfe:	08 95       	ret
				break;
				
			}
			case CONTROL1:
			{
				if(private_pCallBackC1!=NULL){
     d00:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <private_pCallBackC1>
     d04:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <private_pCallBackC1+0x1>
     d08:	30 97       	sbiw	r30, 0x00	; 0
     d0a:	49 f0       	breq	.+18     	; 0xd1e <GloveForDeaf_executeControl+0x3e>
					private_pCallBackC1();
     d0c:	09 95       	icall
     d0e:	08 95       	ret
				}
				break;
			}
			case CONTROL2:
			{
				if(private_pCallBackC2!=NULL){
     d10:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <private_pCallBackC2>
     d14:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <private_pCallBackC2+0x1>
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <GloveForDeaf_executeControl+0x3e>
					private_pCallBackC2();
     d1c:	09 95       	icall
     d1e:	08 95       	ret

00000d20 <GloveForDeaf_deleteProfile>:
				break;
			}
		}
	}
}
void GloveForDeaf_deleteProfile(u8 profile){
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	f8 2e       	mov	r15, r24
	LCD_clear();
     d2c:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"Deleting...");
     d38:	86 ef       	ldi	r24, 0xF6	; 246
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	u16 startAddress=0;
	u16 endAddress=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*10;
	if(profile==PROFILE2){
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	f2 16       	cp	r15, r18
     d44:	29 f0       	breq	.+10     	; 0xd50 <GloveForDeaf_deleteProfile+0x30>
void GloveForDeaf_deleteProfile(u8 profile){
	LCD_clear();
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"Deleting...");
	u16 startAddress=0;
	u16 endAddress=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*10;
     d46:	04 eb       	ldi	r16, 0xB4	; 180
     d48:	10 e0       	ldi	r17, 0x00	; 0
}
void GloveForDeaf_deleteProfile(u8 profile){
	LCD_clear();
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"Deleting...");
	u16 startAddress=0;
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <GloveForDeaf_deleteProfile+0x44>
	u16 endAddress=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*10;
	if(profile==PROFILE2){
		startAddress=endAddress;
		endAddress=(endAddress)*2;
     d50:	08 e6       	ldi	r16, 0x68	; 104
     d52:	11 e0       	ldi	r17, 0x01	; 1
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"Deleting...");
	u16 startAddress=0;
	u16 endAddress=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*10;
	if(profile==PROFILE2){
		startAddress=endAddress;
     d54:	c4 eb       	ldi	r28, 0xB4	; 180
     d56:	d0 e0       	ldi	r29, 0x00	; 0
		endAddress=(endAddress)*2;
	}
	for(u16 i=startAddress;i<endAddress;i++){
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <GloveForDeaf_deleteProfile+0x44>
		EEPROM_writeByte(i,0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	ce 01       	movw	r24, r28
     d5e:	0e 94 b4 01 	call	0x368	; 0x368 <EEPROM_writeByte>
	u16 endAddress=(SPEECH_POSTURES_USED_NUMBER+CONTROL_POSTURES_USED_NUMBER)*10;
	if(profile==PROFILE2){
		startAddress=endAddress;
		endAddress=(endAddress)*2;
	}
	for(u16 i=startAddress;i<endAddress;i++){
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	c0 17       	cp	r28, r16
     d66:	d1 07       	cpc	r29, r17
     d68:	c0 f3       	brcs	.-16     	; 0xd5a <GloveForDeaf_deleteProfile+0x3a>
		EEPROM_writeByte(i,0);
	}
	LCD_clear();
     d6a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_writeString((u8*)"Profile ");
     d6e:	8f ec       	ldi	r24, 0xCF	; 207
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_writeNumber(profile);
     d76:	6f 2d       	mov	r22, r15
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_writeNumber>
	LCD_writeString((u8*)" deleted successfully!");
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	for(u8 i=0;i<16;i++){
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <GloveForDeaf_deleteProfile+0x88>
		LCD_shift(LCD_SHIFT_RIGHT);
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_shift>
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	93 ec       	ldi	r25, 0xC3	; 195
     d98:	29 e0       	ldi	r18, 0x09	; 9
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	90 40       	sbci	r25, 0x00	; 0
     d9e:	20 40       	sbci	r18, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <GloveForDeaf_deleteProfile+0x7a>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <GloveForDeaf_deleteProfile+0x84>
     da4:	00 00       	nop
	}
	LCD_clear();
	LCD_writeString((u8*)"Profile ");
	LCD_writeNumber(profile);
	LCD_writeString((u8*)" deleted successfully!");
	for(u8 i=0;i<16;i++){
     da6:	cf 5f       	subi	r28, 0xFF	; 255
     da8:	c0 31       	cpi	r28, 0x10	; 16
     daa:	88 f3       	brcs	.-30     	; 0xd8e <GloveForDeaf_deleteProfile+0x6e>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	93 ed       	ldi	r25, 0xD3	; 211
     db0:	20 e3       	ldi	r18, 0x30	; 48
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	20 40       	sbci	r18, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <GloveForDeaf_deleteProfile+0x92>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <GloveForDeaf_deleteProfile+0x9c>
     dbc:	00 00       	nop
		LCD_shift(LCD_SHIFT_RIGHT);
		_delay_ms(200);
	}
	_delay_ms(1000);
	LCD_clear();
     dbe:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	08 95       	ret

00000dce <GloveForDeaf_loadPassword>:
		PASSWORD[i]=GloveForDeaf_getPasswordDigit(i);
	}
	GloveForDeaf_saveCurrentPassword();
	_delay_ms(PUSH_BUTTON_LATENCY);
}
void GloveForDeaf_loadPassword(){
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
	for(u16 i=PASSWORD_ADDRESS;i<EEPROM_MAX_SIZE;i++){
     dd2:	cb ef       	ldi	r28, 0xFB	; 251
     dd4:	d1 e0       	ldi	r29, 0x01	; 1
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <GloveForDeaf_loadPassword+0x18>
		EEPROM_readByte(i,&PASSWORD[i-PASSWORD_ADDRESS]);
     dd8:	be 01       	movw	r22, r28
     dda:	62 56       	subi	r22, 0x62	; 98
     ddc:	7e 4f       	sbci	r23, 0xFE	; 254
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EEPROM_readByte>
	}
	GloveForDeaf_saveCurrentPassword();
	_delay_ms(PUSH_BUTTON_LATENCY);
}
void GloveForDeaf_loadPassword(){
	for(u16 i=PASSWORD_ADDRESS;i<EEPROM_MAX_SIZE;i++){
     de4:	21 96       	adiw	r28, 0x01	; 1
     de6:	c1 15       	cp	r28, r1
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	d8 07       	cpc	r29, r24
     dec:	a8 f3       	brcs	.-22     	; 0xdd8 <GloveForDeaf_loadPassword+0xa>
		EEPROM_readByte(i,&PASSWORD[i-PASSWORD_ADDRESS]);
	}
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <GloveForDeaf_saveCurrentPassword>:
void GloveForDeaf_saveCurrentPassword(){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
	for(u16 i=PASSWORD_ADDRESS;i<EEPROM_MAX_SIZE;i++){
     df8:	cb ef       	ldi	r28, 0xFB	; 251
     dfa:	d1 e0       	ldi	r29, 0x01	; 1
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <GloveForDeaf_saveCurrentPassword+0x1a>
		EEPROM_writeByte(i,PASSWORD[i-PASSWORD_ADDRESS]);
     dfe:	fe 01       	movw	r30, r28
     e00:	e2 56       	subi	r30, 0x62	; 98
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	60 81       	ld	r22, Z
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 b4 01 	call	0x368	; 0x368 <EEPROM_writeByte>
	for(u16 i=PASSWORD_ADDRESS;i<EEPROM_MAX_SIZE;i++){
		EEPROM_readByte(i,&PASSWORD[i-PASSWORD_ADDRESS]);
	}
}
void GloveForDeaf_saveCurrentPassword(){
	for(u16 i=PASSWORD_ADDRESS;i<EEPROM_MAX_SIZE;i++){
     e0c:	21 96       	adiw	r28, 0x01	; 1
     e0e:	c1 15       	cp	r28, r1
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	d8 07       	cpc	r29, r24
     e14:	a0 f3       	brcs	.-24     	; 0xdfe <GloveForDeaf_saveCurrentPassword+0xa>
		EEPROM_writeByte(i,PASSWORD[i-PASSWORD_ADDRESS]);
	}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <GloveForDeaf_newPassword>:
		_delay_ms(200);
	}
	_delay_ms(1000);
	LCD_clear();
}
void GloveForDeaf_newPassword(){
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
	LCD_clear();
     e22:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"New Password:");
     e2e:	89 e1       	ldi	r24, 0x19	; 25
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	while(Kit_pushButton_isPressed(BUTTON0)==0){
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <GloveForDeaf_newPassword+0x36>
		GloveForDeaf_getFingerValues();
     e38:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
		GloveForDeaf_displayFingerValuesPASS();
     e3c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GloveForDeaf_displayFingerValuesPASS>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	81 ee       	ldi	r24, 0xE1	; 225
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <GloveForDeaf_newPassword+0x2a>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <GloveForDeaf_newPassword+0x34>
     e50:	00 00       	nop
}
void GloveForDeaf_newPassword(){
	LCD_clear();
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
	LCD_writeString((u8*)"New Password:");
	while(Kit_pushButton_isPressed(BUTTON0)==0){
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
     e58:	88 23       	and	r24, r24
     e5a:	71 f3       	breq	.-36     	; 0xe38 <GloveForDeaf_newPassword+0x1c>
		GloveForDeaf_getFingerValues();
		GloveForDeaf_displayFingerValuesPASS();
		_delay_ms(LCD_LATENCY);
	}
	GloveForDeaf_getFingerValues();
     e5c:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
	for(u8 i=0;i<FINGERS_NUMBER;i++){
     e60:	c0 e0       	ldi	r28, 0x00	; 0
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <GloveForDeaf_newPassword+0x5c>
		PASSWORD[i]=GloveForDeaf_getPasswordDigit(i);
     e64:	0c 2f       	mov	r16, r28
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 41 03 	call	0x682	; 0x682 <GloveForDeaf_getPasswordDigit>
     e6e:	f8 01       	movw	r30, r16
     e70:	e7 56       	subi	r30, 0x67	; 103
     e72:	fc 4f       	sbci	r31, 0xFC	; 252
     e74:	80 83       	st	Z, r24
		GloveForDeaf_getFingerValues();
		GloveForDeaf_displayFingerValuesPASS();
		_delay_ms(LCD_LATENCY);
	}
	GloveForDeaf_getFingerValues();
	for(u8 i=0;i<FINGERS_NUMBER;i++){
     e76:	cf 5f       	subi	r28, 0xFF	; 255
     e78:	c5 30       	cpi	r28, 0x05	; 5
     e7a:	a0 f3       	brcs	.-24     	; 0xe64 <GloveForDeaf_newPassword+0x48>
		PASSWORD[i]=GloveForDeaf_getPasswordDigit(i);
	}
	GloveForDeaf_saveCurrentPassword();
     e7c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <GloveForDeaf_saveCurrentPassword>
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	85 ea       	ldi	r24, 0xA5	; 165
     e84:	9e e0       	ldi	r25, 0x0E	; 14
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <GloveForDeaf_newPassword+0x6a>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <GloveForDeaf_newPassword+0x74>
     e90:	00 00       	nop
	_delay_ms(PUSH_BUTTON_LATENCY);
}
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <Glove_init>:
//**********HAL**********//
#include "Glove_interface.h"
#include "Glove_config.h"

void Glove_init(void){
	DIO_setPinDirection(GLOVE_FINGER1_PORT,GLOVE_FINGER1_PIN,DIO_PIN_INPUT);
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(GLOVE_FINGER2_PORT,GLOVE_FINGER2_PIN,DIO_PIN_INPUT);
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(GLOVE_FINGER3_PORT,GLOVE_FINGER3_PIN,DIO_PIN_INPUT);
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	65 e0       	ldi	r22, 0x05	; 5
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(GLOVE_FINGER4_PORT,GLOVE_FINGER4_PIN,DIO_PIN_INPUT);
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(GLOVE_FINGER5_PORT,GLOVE_FINGER5_PIN,DIO_PIN_INPUT);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	67 e0       	ldi	r22, 0x07	; 7
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	ADC_init(GLOVE_ADC_REF);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
     ed2:	08 95       	ret

00000ed4 <Glove_getFingerValue>:
}
u16 Glove_getFingerValue(u8 finger){
	u16 digitalValue=ADC_getDigitalValue(finger);
     ed4:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_getDigitalValue>
	return digitalValue*GLOVE_CONSTANT;
     ed8:	bc 01       	movw	r22, r24
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__floatunsisf>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5e e3       	ldi	r21, 0x3E	; 62
     eea:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsf3>
     eee:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixunssfsi>
     ef2:	cb 01       	movw	r24, r22
     ef4:	08 95       	ret

00000ef6 <Kit_pushButton_isPressed>:
}
void Kit_BUZ_off   (){
	DIO_setPinValue(BUZZER_PORT,BUZZER_PIN,DIO_PIN_LOW);
}
void Kit_BUZ_toggle(){
	DIO_togglePinValue(BUZZER_PORT,BUZZER_PIN);
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	49 f0       	breq	.+18     	; 0xf0c <Kit_pushButton_isPressed+0x16>
     efa:	18 f0       	brcs	.+6      	; 0xf02 <Kit_pushButton_isPressed+0xc>
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	59 f0       	breq	.+22     	; 0xf16 <Kit_pushButton_isPressed+0x20>
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <Kit_pushButton_isPressed+0x2a>
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_getPinValue>
     f0a:	08 95       	ret
     f0c:	66 e0       	ldi	r22, 0x06	; 6
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_getPinValue>
     f14:	08 95       	ret
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_getPinValue>
     f1e:	08 95       	ret
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	08 95       	ret

00000f24 <Kit_pushButton_init>:
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	51 f0       	breq	.+20     	; 0xf3c <Kit_pushButton_init+0x18>
     f28:	18 f0       	brcs	.+6      	; 0xf30 <Kit_pushButton_init+0xc>
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	69 f0       	breq	.+26     	; 0xf48 <Kit_pushButton_init+0x24>
     f2e:	08 95       	ret
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
     f3a:	08 95       	ret
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	66 e0       	ldi	r22, 0x06	; 6
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
     f46:	08 95       	ret
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
     f52:	08 95       	ret

00000f54 <Kit_BUZ_init>:
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
     f5e:	08 95       	ret

00000f60 <Kit_BUZ_on>:
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	63 e0       	ldi	r22, 0x03	; 3
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
     f6a:	08 95       	ret

00000f6c <Kit_BUZ_off>:
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	63 e0       	ldi	r22, 0x03	; 3
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
     f76:	08 95       	ret

00000f78 <Kit_LED_init>:
}

void Kit_LED_init  (u8 led){
	switch(led){
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	51 f0       	breq	.+20     	; 0xf90 <Kit_LED_init+0x18>
     f7c:	18 f0       	brcs	.+6      	; 0xf84 <Kit_LED_init+0xc>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	69 f0       	breq	.+26     	; 0xf9c <Kit_LED_init+0x24>
     f82:	08 95       	ret
		case LED0:{
			DIO_setPinDirection(LED0_PORT,LED0_PIN,DIO_PIN_OUTPUT);
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
			break;
     f8e:	08 95       	ret
		}
		case LED1:{
			DIO_setPinDirection(LED1_PORT,LED1_PIN,DIO_PIN_OUTPUT);
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	67 e0       	ldi	r22, 0x07	; 7
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
			break;
     f9a:	08 95       	ret
		}
		case LED2:{
			DIO_setPinDirection(LED2_PORT,LED2_PIN,DIO_PIN_OUTPUT);
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	63 e0       	ldi	r22, 0x03	; 3
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
     fa6:	08 95       	ret

00000fa8 <Kit_LED_on>:
			break;
		}
	}
}
void Kit_LED_on    (u8 led){
	switch(led){
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	51 f0       	breq	.+20     	; 0xfc0 <Kit_LED_on+0x18>
     fac:	18 f0       	brcs	.+6      	; 0xfb4 <Kit_LED_on+0xc>
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	69 f0       	breq	.+26     	; 0xfcc <Kit_LED_on+0x24>
     fb2:	08 95       	ret
		case LED0:{
			DIO_setPinValue(LED0_PORT,LED0_PIN,DIO_PIN_HIGH);
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	62 e0       	ldi	r22, 0x02	; 2
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
			break;
     fbe:	08 95       	ret
		}
		case LED1:{
			DIO_setPinValue(LED1_PORT,LED1_PIN,DIO_PIN_HIGH);
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	67 e0       	ldi	r22, 0x07	; 7
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
			break;
     fca:	08 95       	ret
		}
		case LED2:{
			DIO_setPinValue(LED2_PORT,LED2_PIN,DIO_PIN_HIGH);
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	63 e0       	ldi	r22, 0x03	; 3
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
     fd6:	08 95       	ret

00000fd8 <Kit_LED_off>:
			break;
		}
	}
}
void Kit_LED_off   (u8 led){
	switch(led){
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	51 f0       	breq	.+20     	; 0xff0 <Kit_LED_off+0x18>
     fdc:	18 f0       	brcs	.+6      	; 0xfe4 <Kit_LED_off+0xc>
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	69 f0       	breq	.+26     	; 0xffc <Kit_LED_off+0x24>
     fe2:	08 95       	ret
		case LED0:{
			DIO_setPinValue(LED0_PORT,LED0_PIN,DIO_PIN_LOW);
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	62 e0       	ldi	r22, 0x02	; 2
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
			break;
     fee:	08 95       	ret
		}
		case LED1:{
			DIO_setPinValue(LED1_PORT,LED1_PIN,DIO_PIN_LOW);
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	67 e0       	ldi	r22, 0x07	; 7
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
			break;
     ffa:	08 95       	ret
		}
		case LED2:{
			DIO_setPinValue(LED2_PORT,LED2_PIN,DIO_PIN_LOW);
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	63 e0       	ldi	r22, 0x03	; 3
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    1006:	08 95       	ret

00001008 <LCD_sendCmnd>:
	LCD_sendCmnd(0b00000110);
}


void LCD_sendCmnd(u8 cmnd)
{
    1008:	cf 93       	push	r28
    100a:	c8 2f       	mov	r28, r24
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// Write The Most 4 bits Of command on Data Pins
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(cmnd,4));
    1020:	c4 fb       	bst	r28, 4
    1022:	44 27       	eor	r20, r20
    1024:	40 f9       	bld	r20, 0
    1026:	63 e0       	ldi	r22, 0x03	; 3
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(cmnd,5));
    102e:	c5 fb       	bst	r28, 5
    1030:	44 27       	eor	r20, r20
    1032:	40 f9       	bld	r20, 0
    1034:	64 e0       	ldi	r22, 0x04	; 4
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(cmnd,6));
    103c:	c6 fb       	bst	r28, 6
    103e:	44 27       	eor	r20, r20
    1040:	40 f9       	bld	r20, 0
    1042:	65 e0       	ldi	r22, 0x05	; 5
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(cmnd,7));
    104a:	4c 2f       	mov	r20, r28
    104c:	44 1f       	adc	r20, r20
    104e:	44 27       	eor	r20, r20
    1050:	44 1f       	adc	r20, r20
    1052:	66 e0       	ldi	r22, 0x06	; 6
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	63 e0       	ldi	r22, 0x03	; 3
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    1064:	8f e9       	ldi	r24, 0x9F	; 159
    1066:	9f e0       	ldi	r25, 0x0F	; 15
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <LCD_sendCmnd+0x60>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <LCD_sendCmnd+0x66>
    106e:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	63 e0       	ldi	r22, 0x03	; 3
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// Write The Least 4 bits Of command on Data Pins
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(cmnd,0));
    107a:	4c 2f       	mov	r20, r28
    107c:	41 70       	andi	r20, 0x01	; 1
    107e:	63 e0       	ldi	r22, 0x03	; 3
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(cmnd,1));
    1086:	c1 fb       	bst	r28, 1
    1088:	44 27       	eor	r20, r20
    108a:	40 f9       	bld	r20, 0
    108c:	64 e0       	ldi	r22, 0x04	; 4
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(cmnd,2));
    1094:	c2 fb       	bst	r28, 2
    1096:	44 27       	eor	r20, r20
    1098:	40 f9       	bld	r20, 0
    109a:	65 e0       	ldi	r22, 0x05	; 5
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(cmnd,3));
    10a2:	c3 fb       	bst	r28, 3
    10a4:	44 27       	eor	r20, r20
    10a6:	40 f9       	bld	r20, 0
    10a8:	66 e0       	ldi	r22, 0x06	; 6
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    10b0:	41 e0       	ldi	r20, 0x01	; 1
    10b2:	63 e0       	ldi	r22, 0x03	; 3
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    10ba:	8f e9       	ldi	r24, 0x9F	; 159
    10bc:	9f e0       	ldi	r25, 0x0F	; 15
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCD_sendCmnd+0xb6>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <LCD_sendCmnd+0xbc>
    10c4:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
}
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <LCD_init>:


void LCD_init(void)
{
	// Intialize LCD pins As OutPut Pins
	DIO_setPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    10de:	41 e0       	ldi	r20, 0x01	; 1
    10e0:	62 e0       	ldi	r22, 0x02	; 2
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_E_PORT ,LCD_E_PIN ,DIO_PIN_OUTPUT);
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	63 e0       	ldi	r22, 0x03	; 3
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	63 e0       	ldi	r22, 0x03	; 3
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	65 e0       	ldi	r22, 0x05	; 5
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	66 e0       	ldi	r22, 0x06	; 6
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setPinDirection>
    111a:	2f e7       	ldi	r18, 0x7F	; 127
    111c:	85 eb       	ldi	r24, 0xB5	; 181
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	80 40       	sbci	r24, 0x00	; 0
    1124:	90 40       	sbci	r25, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <LCD_init+0x4c>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <LCD_init+0x56>
    112a:	00 00       	nop
	_delay_ms(35);
	
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	64 e0       	ldi	r22, 0x04	; 4
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	65 e0       	ldi	r22, 0x05	; 5
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	66 e0       	ldi	r22, 0x06	; 6
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	63 e0       	ldi	r22, 0x03	; 3
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    1172:	8f e9       	ldi	r24, 0x9F	; 159
    1174:	9f e0       	ldi	r25, 0x0F	; 15
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <LCD_init+0xa2>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <LCD_init+0xa8>
    117c:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	// Function Set command 2*16 LCD , 4 Bit Mode
	LCD_sendCmnd(0b00101000);
    1188:	88 e2       	ldi	r24, 0x28	; 40
    118a:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    118e:	90 ef       	ldi	r25, 0xF0	; 240
    1190:	9a 95       	dec	r25
    1192:	f1 f7       	brne	.-4      	; 0x1190 <LCD_init+0xbc>
	_delay_us(45);
	
	
	// Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_sendCmnd(0b00001111);
    1194:	8f e0       	ldi	r24, 0x0F	; 15
    1196:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
    119a:	20 ef       	ldi	r18, 0xF0	; 240
    119c:	2a 95       	dec	r18
    119e:	f1 f7       	brne	.-4      	; 0x119c <LCD_init+0xc8>
	_delay_us(45);
	
	// Clear Display
	LCD_sendCmnd(0b00000001);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a6:	8f e3       	ldi	r24, 0x3F	; 63
    11a8:	9f e1       	ldi	r25, 0x1F	; 31
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <LCD_init+0xd6>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <LCD_init+0xdc>
    11b0:	00 00       	nop
	_delay_ms(2);
	
	// Set Entry Mode (IncrementOn, ShiftOff)
	LCD_sendCmnd(0b00000110);
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
    11b8:	08 95       	ret

000011ba <LCD_sendChar>:
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
}


void LCD_sendChar(u8 data)
{
    11ba:	cf 93       	push	r28
    11bc:	c8 2f       	mov	r28, r24
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    11be:	41 e0       	ldi	r20, 0x01	; 1
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// set Rw pin = 0 (write)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	62 e0       	ldi	r22, 0x02	; 2
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(data,4));
    11d2:	c4 fb       	bst	r28, 4
    11d4:	44 27       	eor	r20, r20
    11d6:	40 f9       	bld	r20, 0
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(data,5));
    11e0:	c5 fb       	bst	r28, 5
    11e2:	44 27       	eor	r20, r20
    11e4:	40 f9       	bld	r20, 0
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(data,6));
    11ee:	c6 fb       	bst	r28, 6
    11f0:	44 27       	eor	r20, r20
    11f2:	40 f9       	bld	r20, 0
    11f4:	65 e0       	ldi	r22, 0x05	; 5
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(data,7));
    11fc:	4c 2f       	mov	r20, r28
    11fe:	44 1f       	adc	r20, r20
    1200:	44 27       	eor	r20, r20
    1202:	44 1f       	adc	r20, r20
    1204:	66 e0       	ldi	r22, 0x06	; 6
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	63 e0       	ldi	r22, 0x03	; 3
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    1216:	8f e9       	ldi	r24, 0x9F	; 159
    1218:	9f e0       	ldi	r25, 0x0F	; 15
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <LCD_sendChar+0x60>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <LCD_sendChar+0x66>
    1220:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	63 e0       	ldi	r22, 0x03	; 3
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	// Write The Least 4 bits Of data on Data Pins
	DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(data,0));
    122c:	4c 2f       	mov	r20, r28
    122e:	41 70       	andi	r20, 0x01	; 1
    1230:	63 e0       	ldi	r22, 0x03	; 3
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(data,1));
    1238:	c1 fb       	bst	r28, 1
    123a:	44 27       	eor	r20, r20
    123c:	40 f9       	bld	r20, 0
    123e:	64 e0       	ldi	r22, 0x04	; 4
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(data,2));
    1246:	c2 fb       	bst	r28, 2
    1248:	44 27       	eor	r20, r20
    124a:	40 f9       	bld	r20, 0
    124c:	65 e0       	ldi	r22, 0x05	; 5
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(data,3));
    1254:	c3 fb       	bst	r28, 3
    1256:	44 27       	eor	r20, r20
    1258:	40 f9       	bld	r20, 0
    125a:	66 e0       	ldi	r22, 0x06	; 6
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
    126c:	8f e9       	ldi	r24, 0x9F	; 159
    126e:	9f e0       	ldi	r25, 0x0F	; 15
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_sendChar+0xb6>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <LCD_sendChar+0xbc>
    1276:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	63 e0       	ldi	r22, 0x03	; 3
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_setPinValue>
}
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <LCD_clear>:


void LCD_clear(void)
{
	// Clear Display
	LCD_sendCmnd(0b00000001);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
    128c:	8f e3       	ldi	r24, 0x3F	; 63
    128e:	9f e1       	ldi	r25, 0x1F	; 31
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <LCD_clear+0xa>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <LCD_clear+0x10>
    1296:	00 00       	nop
    1298:	08 95       	ret

0000129a <LCD_shift>:
}


void LCD_shift(u8 shifttingDirection)
{
	switch(shifttingDirection)
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	49 f0       	breq	.+18     	; 0x12b0 <LCD_shift+0x16>
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	69 f4       	brne	.+26     	; 0x12bc <LCD_shift+0x22>
	{
		case LCD_SHIFT_RIGHT:
		LCD_sendCmnd(0b00011100);
    12a2:	8c e1       	ldi	r24, 0x1C	; 28
    12a4:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a8:	80 ef       	ldi	r24, 0xF0	; 240
    12aa:	8a 95       	dec	r24
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <LCD_shift+0x10>
    12ae:	08 95       	ret
		_delay_us(45);
		break;
		
		case LCD_SHIFT_LEFT:
		LCD_sendCmnd(0b00011000);
    12b0:	88 e1       	ldi	r24, 0x18	; 24
    12b2:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
    12b6:	80 ef       	ldi	r24, 0xF0	; 240
    12b8:	8a 95       	dec	r24
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <LCD_shift+0x1e>
    12bc:	08 95       	ret

000012be <LCD_writeString>:
	_delay_ms(2);
}


void LCD_writeString(u8* string)
{
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
	if(string!=NULL)
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <LCD_writeString+0x14>
    12c8:	2e c0       	rjmp	.+92     	; 0x1326 <LCD_writeString+0x68>
	{
		u8 counter = 0;
		while(string[counter]!='\0')
		{
			LCD_sendChar(string[counter]);
    12ca:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_sendChar>
			counter++;
    12ce:	cf 5f       	subi	r28, 0xFF	; 255
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <LCD_writeString+0x18>
    12d2:	8c 01       	movw	r16, r24
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
void LCD_writeString(u8* string)
{
	if(string!=NULL)
	{
		u8 counter = 0;
		while(string[counter]!='\0')
    12d6:	f8 01       	movw	r30, r16
    12d8:	ec 0f       	add	r30, r28
    12da:	f1 1d       	adc	r31, r1
    12dc:	80 81       	ld	r24, Z
    12de:	81 11       	cpse	r24, r1
    12e0:	f4 cf       	rjmp	.-24     	; 0x12ca <LCD_writeString+0xc>
		{
			LCD_sendChar(string[counter]);
			counter++;
		}
		if(counter>16){
    12e2:	c1 31       	cpi	r28, 0x11	; 17
    12e4:	00 f1       	brcs	.+64     	; 0x1326 <LCD_writeString+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	83 ed       	ldi	r24, 0xD3	; 211
    12ea:	90 e3       	ldi	r25, 0x30	; 48
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	80 40       	sbci	r24, 0x00	; 0
    12f0:	90 40       	sbci	r25, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <LCD_writeString+0x2e>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <LCD_writeString+0x38>
    12f6:	00 00       	nop
			_delay_ms(1000);
			for(u8 i=0;i<counter-16;i++){
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <LCD_writeString+0x58>
				LCD_shift(LCD_SHIFT_LEFT);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_shift>
    1302:	2f ef       	ldi	r18, 0xFF	; 255
    1304:	83 ec       	ldi	r24, 0xC3	; 195
    1306:	99 e0       	ldi	r25, 0x09	; 9
    1308:	21 50       	subi	r18, 0x01	; 1
    130a:	80 40       	sbci	r24, 0x00	; 0
    130c:	90 40       	sbci	r25, 0x00	; 0
    130e:	e1 f7       	brne	.-8      	; 0x1308 <LCD_writeString+0x4a>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <LCD_writeString+0x54>
    1312:	00 00       	nop
			LCD_sendChar(string[counter]);
			counter++;
		}
		if(counter>16){
			_delay_ms(1000);
			for(u8 i=0;i<counter-16;i++){
    1314:	1f 5f       	subi	r17, 0xFF	; 255
    1316:	21 2f       	mov	r18, r17
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8c 2f       	mov	r24, r28
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	40 97       	sbiw	r24, 0x10	; 16
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	5c f3       	brlt	.-42     	; 0x12fc <LCD_writeString+0x3e>
				LCD_shift(LCD_SHIFT_LEFT);
				_delay_ms(200);
			}
		}
	}
}
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <LCD_goToSpecificPosition>:
}


void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	switch(LineNumber)
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	19 f0       	breq	.+6      	; 0x1338 <LCD_goToSpecificPosition+0xa>
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	49 f0       	breq	.+18     	; 0x1348 <LCD_goToSpecificPosition+0x1a>
    1336:	08 95       	ret
	{
		case LCD_LINE_ONE:
		LCD_sendCmnd(0x80+Position);
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	86 0f       	add	r24, r22
    133c:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1340:	80 ef       	ldi	r24, 0xF0	; 240
    1342:	8a 95       	dec	r24
    1344:	f1 f7       	brne	.-4      	; 0x1342 <LCD_goToSpecificPosition+0x14>
    1346:	08 95       	ret
		_delay_us(45);
		break;
		
		case LCD_LINE_TWO:
		LCD_sendCmnd(0xc0+Position);
    1348:	80 ec       	ldi	r24, 0xC0	; 192
    134a:	86 0f       	add	r24, r22
    134c:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_sendCmnd>
    1350:	80 ef       	ldi	r24, 0xF0	; 240
    1352:	8a 95       	dec	r24
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_goToSpecificPosition+0x24>
    1356:	08 95       	ret

00001358 <LCD_writeNumber>:
	}
}


void LCD_writeNumber(u32 number)
{
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	8b 01       	movw	r16, r22
    1366:	9c 01       	movw	r18, r24
	u32 reversedNum = 1;
	
	if(number == 0)
    1368:	67 2b       	or	r22, r23
    136a:	68 2b       	or	r22, r24
    136c:	69 2b       	or	r22, r25
    136e:	49 f5       	brne	.+82     	; 0x13c2 <LCD_writeNumber+0x6a>
	{
		LCD_sendChar('0');
    1370:	80 e3       	ldi	r24, 0x30	; 48
    1372:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_sendChar>
    1376:	45 c0       	rjmp	.+138    	; 0x1402 <LCD_writeNumber+0xaa>
	else
	{
		// reverse the number
		while(number != 0)
		{
			reversedNum = reversedNum*10 + number%10;
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	6c 01       	movw	r12, r24
    1386:	7d 01       	movw	r14, r26
    1388:	cc 0c       	add	r12, r12
    138a:	dd 1c       	adc	r13, r13
    138c:	ee 1c       	adc	r14, r14
    138e:	ff 1c       	adc	r15, r15
    1390:	cc 0c       	add	r12, r12
    1392:	dd 1c       	adc	r13, r13
    1394:	ee 1c       	adc	r14, r14
    1396:	ff 1c       	adc	r15, r15
    1398:	c8 0e       	add	r12, r24
    139a:	d9 1e       	adc	r13, r25
    139c:	ea 1e       	adc	r14, r26
    139e:	fb 1e       	adc	r15, r27
    13a0:	c9 01       	movw	r24, r18
    13a2:	b8 01       	movw	r22, r16
    13a4:	2a e0       	ldi	r18, 0x0A	; 10
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodsi4>
    13b0:	6c 0d       	add	r22, r12
    13b2:	7d 1d       	adc	r23, r13
    13b4:	8e 1d       	adc	r24, r14
    13b6:	9f 1d       	adc	r25, r15
			number /= 10;
    13b8:	02 2f       	mov	r16, r18
    13ba:	13 2f       	mov	r17, r19
    13bc:	24 2f       	mov	r18, r20
    13be:	35 2f       	mov	r19, r21
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <LCD_writeNumber+0x72>
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
		LCD_sendChar('0');
	}
	else
	{
		// reverse the number
		while(number != 0)
    13ca:	01 15       	cp	r16, r1
    13cc:	11 05       	cpc	r17, r1
    13ce:	21 05       	cpc	r18, r1
    13d0:	31 05       	cpc	r19, r1
    13d2:	91 f6       	brne	.-92     	; 0x1378 <LCD_writeNumber+0x20>
		}
		
		
		do
		{
			LCD_sendChar(reversedNum%10 + '0');
    13d4:	2a e0       	ldi	r18, 0x0A	; 10
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodsi4>
    13e0:	e2 2e       	mov	r14, r18
    13e2:	f3 2e       	mov	r15, r19
    13e4:	04 2f       	mov	r16, r20
    13e6:	15 2f       	mov	r17, r21
    13e8:	80 e3       	ldi	r24, 0x30	; 48
    13ea:	86 0f       	add	r24, r22
    13ec:	0e 94 dd 08 	call	0x11ba	; 0x11ba <LCD_sendChar>
			reversedNum /= 10;
    13f0:	6e 2d       	mov	r22, r14
    13f2:	7f 2d       	mov	r23, r15
    13f4:	80 2f       	mov	r24, r16
    13f6:	91 2f       	mov	r25, r17
		}
		while(reversedNum != 1);
    13f8:	61 30       	cpi	r22, 0x01	; 1
    13fa:	71 05       	cpc	r23, r1
    13fc:	81 05       	cpc	r24, r1
    13fe:	91 05       	cpc	r25, r1
    1400:	49 f7       	brne	.-46     	; 0x13d4 <LCD_writeNumber+0x7c>
	}
}
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	08 95       	ret

00001410 <LEDS_ON>:
	initialize();
	GloveForDeaf_loadProfile(PROFILE1);
	u8 array[5]={0,0,0,0,0};
	GloveForDeaf_loadValues(PROFILE1,array,address);
	GloveForDeaf_displayArray(array);
}
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Kit_LED_on>
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Kit_LED_on>
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Kit_LED_on>
    1422:	08 95       	ret

00001424 <LEDS_OFF>:
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Kit_LED_off>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Kit_LED_off>
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Kit_LED_off>
    1436:	08 95       	ret

00001438 <BUZZ>:
    1438:	0e 94 b0 07 	call	0xf60	; 0xf60 <Kit_BUZ_on>
    143c:	2f ef       	ldi	r18, 0xFF	; 255
    143e:	83 ed       	ldi	r24, 0xD3	; 211
    1440:	90 e3       	ldi	r25, 0x30	; 48
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	80 40       	sbci	r24, 0x00	; 0
    1446:	90 40       	sbci	r25, 0x00	; 0
    1448:	e1 f7       	brne	.-8      	; 0x1442 <BUZZ+0xa>
    144a:	00 c0       	rjmp	.+0      	; 0x144c <BUZZ+0x14>
    144c:	00 00       	nop
    144e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Kit_BUZ_off>
    1452:	08 95       	ret

00001454 <initialize>:
    1454:	0e 94 aa 07 	call	0xf54	; 0xf54 <Kit_BUZ_init>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	0e 94 92 07 	call	0xf24	; 0xf24 <Kit_pushButton_init>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 92 07 	call	0xf24	; 0xf24 <Kit_pushButton_init>
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	0e 94 92 07 	call	0xf24	; 0xf24 <Kit_pushButton_init>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 bc 07 	call	0xf78	; 0xf78 <Kit_LED_init>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	0e 94 bc 07 	call	0xf78	; 0xf78 <Kit_LED_init>
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	0e 94 bc 07 	call	0xf78	; 0xf78 <Kit_LED_init>
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	88 e0       	ldi	r24, 0x08	; 8
    1480:	9a e0       	ldi	r25, 0x0A	; 10
    1482:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <GloveForDeaf_setCallBackControl>
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	82 e1       	ldi	r24, 0x12	; 18
    148a:	9a e0       	ldi	r25, 0x0A	; 10
    148c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <GloveForDeaf_setCallBackControl>
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	8c e1       	ldi	r24, 0x1C	; 28
    1494:	9a e0       	ldi	r25, 0x0A	; 10
    1496:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <GloveForDeaf_setCallBackControl>
    149a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <GloveForDeaf_init>
    149e:	0e 94 e7 06 	call	0xdce	; 0xdce <GloveForDeaf_loadPassword>
    14a2:	08 95       	ret

000014a4 <changePassword>:
	}
	
	mainMenu();	
}
void changePassword(){
	LCD_clear();
    14a4:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"Press 0 to Save");
    14b0:	8c e2       	ldi	r24, 0x2C	; 44
    14b2:	92 e0       	ldi	r25, 0x02	; 2
    14b4:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    14ba:	83 ed       	ldi	r24, 0xD3	; 211
    14bc:	90 e3       	ldi	r25, 0x30	; 48
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	80 40       	sbci	r24, 0x00	; 0
    14c2:	90 40       	sbci	r25, 0x00	; 0
    14c4:	e1 f7       	brne	.-8      	; 0x14be <changePassword+0x1a>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <changePassword+0x24>
    14c8:	00 00       	nop
	_delay_ms(1000);
	GloveForDeaf_newPassword();
    14ca:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GloveForDeaf_newPassword>
	LCD_clear();
    14ce:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"Password changed successfully!");
    14da:	8c e3       	ldi	r24, 0x3C	; 60
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	83 ed       	ldi	r24, 0xD3	; 211
    14e6:	90 e3       	ldi	r25, 0x30	; 48
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <changePassword+0x44>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <changePassword+0x4e>
    14f2:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
    14f4:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	mainMenu();
    14f8:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    14fc:	08 95       	ret

000014fe <settings>:
			mainMenu();
		}
	}
}
void settings(){
	LCD_clear();
    14fe:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Clear Data");
    150a:	8b e5       	ldi	r24, 0x5B	; 91
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"1-New Password");
    151a:	88 e6       	ldi	r24, 0x68	; 104
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1528:	81 11       	cpse	r24, r1
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <settings+0x42>
	&& Kit_pushButton_isPressed(BUTTON1)==0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1532:	81 11       	cpse	r24, r1
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <settings+0x42>
	&& Kit_pushButton_isPressed(BUTTON2)==0);
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    153c:	88 23       	and	r24, r24
    153e:	89 f3       	breq	.-30     	; 0x1522 <settings+0x24>
	if(Kit_pushButton_isPressed(BUTTON0)){
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1546:	88 23       	and	r24, r24
    1548:	61 f0       	breq	.+24     	; 0x1562 <settings+0x64>
    154a:	2f ef       	ldi	r18, 0xFF	; 255
    154c:	85 ea       	ldi	r24, 0xA5	; 165
    154e:	9e e0       	ldi	r25, 0x0E	; 14
    1550:	21 50       	subi	r18, 0x01	; 1
    1552:	80 40       	sbci	r24, 0x00	; 0
    1554:	90 40       	sbci	r25, 0x00	; 0
    1556:	e1 f7       	brne	.-8      	; 0x1550 <settings+0x52>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <settings+0x5c>
    155a:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		clearData();
    155c:	0e 94 82 0c 	call	0x1904	; 0x1904 <clearData>
    1560:	08 95       	ret
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)){
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1568:	88 23       	and	r24, r24
    156a:	61 f0       	breq	.+24     	; 0x1584 <settings+0x86>
    156c:	2f ef       	ldi	r18, 0xFF	; 255
    156e:	85 ea       	ldi	r24, 0xA5	; 165
    1570:	9e e0       	ldi	r25, 0x0E	; 14
    1572:	21 50       	subi	r18, 0x01	; 1
    1574:	80 40       	sbci	r24, 0x00	; 0
    1576:	90 40       	sbci	r25, 0x00	; 0
    1578:	e1 f7       	brne	.-8      	; 0x1572 <settings+0x74>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <settings+0x7e>
    157c:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			changePassword();
    157e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <changePassword>
    1582:	08 95       	ret
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	85 ea       	ldi	r24, 0xA5	; 165
    1588:	9e e0       	ldi	r25, 0x0E	; 14
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	80 40       	sbci	r24, 0x00	; 0
    158e:	90 40       	sbci	r25, 0x00	; 0
    1590:	e1 f7       	brne	.-8      	; 0x158a <settings+0x8c>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <settings+0x96>
    1594:	00 00       	nop
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			goBack();
    1596:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <goBack>
    159a:	08 95       	ret

0000159c <backMenu>:

void goBack				(void){
	backMenu();
}
void backMenu(){
	LCD_clear();
    159c:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Main Menu");
    15a8:	87 e7       	ldi	r24, 0x77	; 119
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"1-Settings");
    15b8:	83 e8       	ldi	r24, 0x83	; 131
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    15c6:	81 11       	cpse	r24, r1
    15c8:	0a c0       	rjmp	.+20     	; 0x15de <backMenu+0x42>
	&& Kit_pushButton_isPressed(BUTTON1)==0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    15d0:	81 11       	cpse	r24, r1
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <backMenu+0x42>
	&& Kit_pushButton_isPressed(BUTTON2)==0);
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    15da:	88 23       	and	r24, r24
    15dc:	89 f3       	breq	.-30     	; 0x15c0 <backMenu+0x24>
	if(Kit_pushButton_isPressed(BUTTON0)){
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    15e4:	88 23       	and	r24, r24
    15e6:	61 f0       	breq	.+24     	; 0x1600 <backMenu+0x64>
    15e8:	2f ef       	ldi	r18, 0xFF	; 255
    15ea:	85 ea       	ldi	r24, 0xA5	; 165
    15ec:	9e e0       	ldi	r25, 0x0E	; 14
    15ee:	21 50       	subi	r18, 0x01	; 1
    15f0:	80 40       	sbci	r24, 0x00	; 0
    15f2:	90 40       	sbci	r25, 0x00	; 0
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <backMenu+0x52>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <backMenu+0x5c>
    15f8:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		mainMenu();
    15fa:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    15fe:	08 95       	ret
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)){
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1606:	88 23       	and	r24, r24
    1608:	61 f0       	breq	.+24     	; 0x1622 <backMenu+0x86>
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	85 ea       	ldi	r24, 0xA5	; 165
    160e:	9e e0       	ldi	r25, 0x0E	; 14
    1610:	21 50       	subi	r18, 0x01	; 1
    1612:	80 40       	sbci	r24, 0x00	; 0
    1614:	90 40       	sbci	r25, 0x00	; 0
    1616:	e1 f7       	brne	.-8      	; 0x1610 <backMenu+0x74>
    1618:	00 c0       	rjmp	.+0      	; 0x161a <backMenu+0x7e>
    161a:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			settings();
    161c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <settings>
    1620:	08 95       	ret
    1622:	2f ef       	ldi	r18, 0xFF	; 255
    1624:	85 ea       	ldi	r24, 0xA5	; 165
    1626:	9e e0       	ldi	r25, 0x0E	; 14
    1628:	21 50       	subi	r18, 0x01	; 1
    162a:	80 40       	sbci	r24, 0x00	; 0
    162c:	90 40       	sbci	r25, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <backMenu+0x8c>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <backMenu+0x96>
    1632:	00 00       	nop
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
    1634:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    1638:	08 95       	ret

0000163a <mainMenu>:
	Kit_BUZ_on();
	_delay_ms(1000);
	Kit_BUZ_off();
}
void mainMenu(void){
	LCD_clear();
    163a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Load Profile");
    1646:	8e e8       	ldi	r24, 0x8E	; 142
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"1-New Profile");
    1656:	8d e9       	ldi	r24, 0x9D	; 157
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	//Busy wait till user choose
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1664:	81 11       	cpse	r24, r1
    1666:	0a c0       	rjmp	.+20     	; 0x167c <mainMenu+0x42>
	&& Kit_pushButton_isPressed(BUTTON1)==0 
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    166e:	81 11       	cpse	r24, r1
    1670:	05 c0       	rjmp	.+10     	; 0x167c <mainMenu+0x42>
	&&Kit_pushButton_isPressed(BUTTON2)==0);
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1678:	88 23       	and	r24, r24
    167a:	89 f3       	breq	.-30     	; 0x165e <mainMenu+0x24>
	if(Kit_pushButton_isPressed(BUTTON0)){
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1682:	88 23       	and	r24, r24
    1684:	61 f0       	breq	.+24     	; 0x169e <mainMenu+0x64>
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	85 ea       	ldi	r24, 0xA5	; 165
    168a:	9e e0       	ldi	r25, 0x0E	; 14
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	80 40       	sbci	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <mainMenu+0x52>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <mainMenu+0x5c>
    1696:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		chooseProfile();
    1698:	0e 94 0b 0c 	call	0x1816	; 0x1816 <chooseProfile>
    169c:	08 95       	ret
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)){
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    16a4:	88 23       	and	r24, r24
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <mainMenu+0x86>
    16a8:	2f ef       	ldi	r18, 0xFF	; 255
    16aa:	85 ea       	ldi	r24, 0xA5	; 165
    16ac:	9e e0       	ldi	r25, 0x0E	; 14
    16ae:	21 50       	subi	r18, 0x01	; 1
    16b0:	80 40       	sbci	r24, 0x00	; 0
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <mainMenu+0x74>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <mainMenu+0x7e>
    16b8:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			overrideProfile();
    16ba:	0e 94 45 0c 	call	0x188a	; 0x188a <overrideProfile>
    16be:	08 95       	ret
    16c0:	2f ef       	ldi	r18, 0xFF	; 255
    16c2:	85 ea       	ldi	r24, 0xA5	; 165
    16c4:	9e e0       	ldi	r25, 0x0E	; 14
    16c6:	21 50       	subi	r18, 0x01	; 1
    16c8:	80 40       	sbci	r24, 0x00	; 0
    16ca:	90 40       	sbci	r25, 0x00	; 0
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <mainMenu+0x8c>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <mainMenu+0x96>
    16d0:	00 00       	nop
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			backMenu();
    16d2:	0e 94 ce 0a 	call	0x159c	; 0x159c <backMenu>
    16d6:	08 95       	ret

000016d8 <start_1>:
{
	start_1();
	
}
void start_1(){
	initialize();
    16d8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <initialize>
	/*To reset password when forgotten,
	burn the hex file again without 
	loading the password from memory*/
	GloveForDeaf_passwordCheck();
    16dc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <GloveForDeaf_passwordCheck>
	mainMenu();
    16e0:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    16e4:	08 95       	ret

000016e6 <main>:
#include "Kit_interface.h"


int main(void)
{
	start_1();
    16e6:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <start_1>
	
}
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	08 95       	ret

000016f0 <chooseMode>:
		}
	}
	chooseMode();
}
void chooseMode(void){
	LCD_clear();
    16f0:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Speech Mode");
    16fc:	8b ea       	ldi	r24, 0xAB	; 171
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"1-Control Mode");
    170c:	89 eb       	ldi	r24, 0xB9	; 185
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    171a:	81 11       	cpse	r24, r1
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <chooseMode+0x42>
	&& Kit_pushButton_isPressed(BUTTON1)==0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1724:	81 11       	cpse	r24, r1
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <chooseMode+0x42>
	&& Kit_pushButton_isPressed(BUTTON2)==0);
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    172e:	88 23       	and	r24, r24
    1730:	89 f3       	breq	.-30     	; 0x1714 <chooseMode+0x24>
	if(Kit_pushButton_isPressed(BUTTON0)){
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1738:	88 23       	and	r24, r24
    173a:	61 f0       	breq	.+24     	; 0x1754 <chooseMode+0x64>
    173c:	2f ef       	ldi	r18, 0xFF	; 255
    173e:	85 ea       	ldi	r24, 0xA5	; 165
    1740:	9e e0       	ldi	r25, 0x0E	; 14
    1742:	21 50       	subi	r18, 0x01	; 1
    1744:	80 40       	sbci	r24, 0x00	; 0
    1746:	90 40       	sbci	r25, 0x00	; 0
    1748:	e1 f7       	brne	.-8      	; 0x1742 <chooseMode+0x52>
    174a:	00 c0       	rjmp	.+0      	; 0x174c <chooseMode+0x5c>
    174c:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		speechMode();
    174e:	0e 94 c7 0b 	call	0x178e	; 0x178e <speechMode>
    1752:	08 95       	ret
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)){
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    175a:	88 23       	and	r24, r24
    175c:	61 f0       	breq	.+24     	; 0x1776 <chooseMode+0x86>
    175e:	2f ef       	ldi	r18, 0xFF	; 255
    1760:	85 ea       	ldi	r24, 0xA5	; 165
    1762:	9e e0       	ldi	r25, 0x0E	; 14
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	80 40       	sbci	r24, 0x00	; 0
    1768:	90 40       	sbci	r25, 0x00	; 0
    176a:	e1 f7       	brne	.-8      	; 0x1764 <chooseMode+0x74>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <chooseMode+0x7e>
    176e:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			controlMode();
    1770:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <controlMode>
    1774:	08 95       	ret
    1776:	2f ef       	ldi	r18, 0xFF	; 255
    1778:	85 ea       	ldi	r24, 0xA5	; 165
    177a:	9e e0       	ldi	r25, 0x0E	; 14
    177c:	21 50       	subi	r18, 0x01	; 1
    177e:	80 40       	sbci	r24, 0x00	; 0
    1780:	90 40       	sbci	r25, 0x00	; 0
    1782:	e1 f7       	brne	.-8      	; 0x177c <chooseMode+0x8c>
    1784:	00 c0       	rjmp	.+0      	; 0x1786 <chooseMode+0x96>
    1786:	00 00       	nop
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
    1788:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    178c:	08 95       	ret

0000178e <speechMode>:
		}
	}
}
void speechMode(){
	LCD_clear();
    178e:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	while(1){
		GloveForDeaf_getFingerValues();
    1792:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
		u8 posture=GloveForDeaf_getSpeechPosture();
    1796:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GloveForDeaf_getSpeechPosture>
		GloveForDeaf_printSpeechPosture(posture);
    179a:	0e 94 b3 02 	call	0x566	; 0x566 <GloveForDeaf_printSpeechPosture>
		if(Kit_pushButton_isPressed(BUTTON2)){
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    17a4:	88 23       	and	r24, r24
    17a6:	59 f0       	breq	.+22     	; 0x17be <speechMode+0x30>
    17a8:	2f ef       	ldi	r18, 0xFF	; 255
    17aa:	85 ea       	ldi	r24, 0xA5	; 165
    17ac:	9e e0       	ldi	r25, 0x0E	; 14
    17ae:	21 50       	subi	r18, 0x01	; 1
    17b0:	80 40       	sbci	r24, 0x00	; 0
    17b2:	90 40       	sbci	r25, 0x00	; 0
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <speechMode+0x20>
    17b6:	00 c0       	rjmp	.+0      	; 0x17b8 <speechMode+0x2a>
    17b8:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			chooseMode();
    17ba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <chooseMode>
    17be:	2f ef       	ldi	r18, 0xFF	; 255
    17c0:	81 ee       	ldi	r24, 0xE1	; 225
    17c2:	94 e0       	ldi	r25, 0x04	; 4
    17c4:	21 50       	subi	r18, 0x01	; 1
    17c6:	80 40       	sbci	r24, 0x00	; 0
    17c8:	90 40       	sbci	r25, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <speechMode+0x36>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <speechMode+0x40>
    17ce:	00 00       	nop
    17d0:	e0 cf       	rjmp	.-64     	; 0x1792 <speechMode+0x4>

000017d2 <controlMode>:
		}
		_delay_ms(LCD_LATENCY);
	}
}
void controlMode(){
	LCD_clear();
    17d2:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	while(1){
		GloveForDeaf_getFingerValues();
    17d6:	0e 94 03 02 	call	0x406	; 0x406 <GloveForDeaf_getFingerValues>
		u8 posture=GloveForDeaf_getControlPosture();
    17da:	0e 94 cd 02 	call	0x59a	; 0x59a <GloveForDeaf_getControlPosture>
		GloveForDeaf_executeControl(posture);
    17de:	0e 94 70 06 	call	0xce0	; 0xce0 <GloveForDeaf_executeControl>
		if(Kit_pushButton_isPressed(BUTTON2)){
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    17e8:	88 23       	and	r24, r24
    17ea:	59 f0       	breq	.+22     	; 0x1802 <controlMode+0x30>
    17ec:	2f ef       	ldi	r18, 0xFF	; 255
    17ee:	85 ea       	ldi	r24, 0xA5	; 165
    17f0:	9e e0       	ldi	r25, 0x0E	; 14
    17f2:	21 50       	subi	r18, 0x01	; 1
    17f4:	80 40       	sbci	r24, 0x00	; 0
    17f6:	90 40       	sbci	r25, 0x00	; 0
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <controlMode+0x20>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <controlMode+0x2a>
    17fc:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			chooseMode();
    17fe:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <chooseMode>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	81 ee       	ldi	r24, 0xE1	; 225
    1806:	94 e0       	ldi	r25, 0x04	; 4
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	80 40       	sbci	r24, 0x00	; 0
    180c:	90 40       	sbci	r25, 0x00	; 0
    180e:	e1 f7       	brne	.-8      	; 0x1808 <controlMode+0x36>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <controlMode+0x40>
    1812:	00 00       	nop
    1814:	e0 cf       	rjmp	.-64     	; 0x17d6 <controlMode+0x4>

00001816 <chooseProfile>:
		
	}
	
}
void chooseProfile(){
	LCD_clear();
    1816:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Profile 1");
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	if(PROFILES_USED==2){
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
		LCD_writeString((u8*)"1-Profile 2");
	}
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1830:	81 11       	cpse	r24, r1
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <chooseProfile+0x2e>
	&& ((Kit_pushButton_isPressed(BUTTON1)==0)||(PROFILES_USED!=2))
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
	&&Kit_pushButton_isPressed(BUTTON2)==0);
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1840:	88 23       	and	r24, r24
    1842:	99 f3       	breq	.-26     	; 0x182a <chooseProfile+0x14>
	if(Kit_pushButton_isPressed(BUTTON0)){
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    184a:	88 23       	and	r24, r24
    184c:	79 f0       	breq	.+30     	; 0x186c <chooseProfile+0x56>
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	85 ea       	ldi	r24, 0xA5	; 165
    1852:	9e e0       	ldi	r25, 0x0E	; 14
    1854:	21 50       	subi	r18, 0x01	; 1
    1856:	80 40       	sbci	r24, 0x00	; 0
    1858:	90 40       	sbci	r25, 0x00	; 0
    185a:	e1 f7       	brne	.-8      	; 0x1854 <chooseProfile+0x3e>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <chooseProfile+0x48>
    185e:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		GloveForDeaf_loadProfile(PROFILE1);
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 ca 05 	call	0xb94	; 0xb94 <GloveForDeaf_loadProfile>
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
			return;
		}
	}
	chooseMode();
    1866:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <chooseMode>
    186a:	08 95       	ret
	if(Kit_pushButton_isPressed(BUTTON0)){
		_delay_ms(PUSH_BUTTON_LATENCY);
		GloveForDeaf_loadProfile(PROFILE1);
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)&&(PROFILES_USED==2)){
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	85 ea       	ldi	r24, 0xA5	; 165
    1876:	9e e0       	ldi	r25, 0x0E	; 14
    1878:	21 50       	subi	r18, 0x01	; 1
    187a:	80 40       	sbci	r24, 0x00	; 0
    187c:	90 40       	sbci	r25, 0x00	; 0
    187e:	e1 f7       	brne	.-8      	; 0x1878 <chooseProfile+0x62>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <chooseProfile+0x6c>
    1882:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			GloveForDeaf_loadProfile(PROFILE2);
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
    1884:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    1888:	08 95       	ret

0000188a <overrideProfile>:
		}
		_delay_ms(LCD_LATENCY);
	}
}
void overrideProfile(){
	LCD_clear();
    188a:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Profile_1");
    1896:	84 ed       	ldi	r24, 0xD4	; 212
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	if(PROFILES_USED==2){
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
		LCD_writeString((u8*)"1-Profile_2");
	}
	while(Kit_pushButton_isPressed(BUTTON0)==0 
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    18a4:	81 11       	cpse	r24, r1
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <overrideProfile+0x2e>
	&&((Kit_pushButton_isPressed(BUTTON1)==0)||(PROFILES_USED==1))
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
	&& Kit_pushButton_isPressed(BUTTON2)==0);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    18b4:	88 23       	and	r24, r24
    18b6:	99 f3       	breq	.-26     	; 0x189e <overrideProfile+0x14>
	if(Kit_pushButton_isPressed(BUTTON0)){
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    18be:	88 23       	and	r24, r24
    18c0:	79 f0       	breq	.+30     	; 0x18e0 <overrideProfile+0x56>
    18c2:	2f ef       	ldi	r18, 0xFF	; 255
    18c4:	85 ea       	ldi	r24, 0xA5	; 165
    18c6:	9e e0       	ldi	r25, 0x0E	; 14
    18c8:	21 50       	subi	r18, 0x01	; 1
    18ca:	80 40       	sbci	r24, 0x00	; 0
    18cc:	90 40       	sbci	r25, 0x00	; 0
    18ce:	e1 f7       	brne	.-8      	; 0x18c8 <overrideProfile+0x3e>
    18d0:	00 c0       	rjmp	.+0      	; 0x18d2 <overrideProfile+0x48>
    18d2:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		GloveForDeaf_createNewProfile(PROFILE1);
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <GloveForDeaf_createNewProfile>
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
			return;
		}
	}
	chooseProfile();
    18da:	0e 94 0b 0c 	call	0x1816	; 0x1816 <chooseProfile>
    18de:	08 95       	ret
		_delay_ms(PUSH_BUTTON_LATENCY);
		GloveForDeaf_createNewProfile(PROFILE1);
		
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)&&(PROFILES_USED==2)){
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	85 ea       	ldi	r24, 0xA5	; 165
    18ea:	9e e0       	ldi	r25, 0x0E	; 14
    18ec:	21 50       	subi	r18, 0x01	; 1
    18ee:	80 40       	sbci	r24, 0x00	; 0
    18f0:	90 40       	sbci	r25, 0x00	; 0
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <overrideProfile+0x62>
    18f4:	00 c0       	rjmp	.+0      	; 0x18f6 <overrideProfile+0x6c>
    18f6:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			GloveForDeaf_createNewProfile(PROFILE2);
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			mainMenu();
    18f8:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    18fc:	08 95       	ret

000018fe <goBack>:
	}
	chooseProfile();
}

void goBack				(void){
	backMenu();
    18fe:	0e 94 ce 0a 	call	0x159c	; 0x159c <backMenu>
    1902:	08 95       	ret

00001904 <clearData>:
			goBack();
		}
	}
}
void clearData(){
	LCD_clear();
    1904:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,0);
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 97 09 	call	0x132e	; 0x132e <LCD_goToSpecificPosition>
	LCD_writeString((u8*)"0-Profile 1");
    1910:	88 ec       	ldi	r24, 0xC8	; 200
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_writeString>
	if(PROFILES_USED==2){
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
		LCD_writeString((u8*)"1-Profile 2");
	}
	//Busy wait till user choose
	while(Kit_pushButton_isPressed(BUTTON0)==0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    191e:	81 11       	cpse	r24, r1
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <clearData+0x2e>
	&&((Kit_pushButton_isPressed(BUTTON1)==0)||(PROFILES_USED!=2))
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
	&&Kit_pushButton_isPressed(BUTTON2)==0);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    192e:	88 23       	and	r24, r24
    1930:	99 f3       	breq	.-26     	; 0x1918 <clearData+0x14>
	if(Kit_pushButton_isPressed(BUTTON0)){
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    1938:	88 23       	and	r24, r24
    193a:	69 f0       	breq	.+26     	; 0x1956 <clearData+0x52>
    193c:	2f ef       	ldi	r18, 0xFF	; 255
    193e:	85 ea       	ldi	r24, 0xA5	; 165
    1940:	9e e0       	ldi	r25, 0x0E	; 14
    1942:	21 50       	subi	r18, 0x01	; 1
    1944:	80 40       	sbci	r24, 0x00	; 0
    1946:	90 40       	sbci	r25, 0x00	; 0
    1948:	e1 f7       	brne	.-8      	; 0x1942 <clearData+0x3e>
    194a:	00 c0       	rjmp	.+0      	; 0x194c <clearData+0x48>
    194c:	00 00       	nop
		_delay_ms(PUSH_BUTTON_LATENCY);
		GloveForDeaf_deleteProfile(PROFILE1);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 90 06 	call	0xd20	; 0xd20 <GloveForDeaf_deleteProfile>
    1954:	0e c0       	rjmp	.+28     	; 0x1972 <clearData+0x6e>
	}
	else{
		if(Kit_pushButton_isPressed(BUTTON1)&&(PROFILES_USED==2)){
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 7b 07 	call	0xef6	; 0xef6 <Kit_pushButton_isPressed>
    195c:	2f ef       	ldi	r18, 0xFF	; 255
    195e:	85 ea       	ldi	r24, 0xA5	; 165
    1960:	9e e0       	ldi	r25, 0x0E	; 14
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	80 40       	sbci	r24, 0x00	; 0
    1966:	90 40       	sbci	r25, 0x00	; 0
    1968:	e1 f7       	brne	.-8      	; 0x1962 <clearData+0x5e>
    196a:	00 c0       	rjmp	.+0      	; 0x196c <clearData+0x68>
    196c:	00 00       	nop
			_delay_ms(PUSH_BUTTON_LATENCY);
			GloveForDeaf_deleteProfile(PROFILE2);
		}
		else{
			_delay_ms(PUSH_BUTTON_LATENCY);
			settings();
    196e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <settings>
		}
		
	}
	
	mainMenu();	
    1972:	0e 94 1d 0b 	call	0x163a	; 0x163a <mainMenu>
    1976:	08 95       	ret

00001978 <TWI_initMaster>:
		while(GET_BIT(TWCR,TWINT)==0);
		//Check ACK = Master receive data ACK
		while(TWI_MASTER_DATA_RECIEVE_ACK!=TWI_STATUS_VALUE);
		*RxData=TWDR;
		// Disable ACK
		CLR_BIT(TWCR,TWEA);
    1978:	81 b1       	in	r24, 0x01	; 1
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	81 b9       	out	0x01, r24	; 1
    197e:	81 b1       	in	r24, 0x01	; 1
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	81 b9       	out	0x01, r24	; 1
    1984:	8c e0       	ldi	r24, 0x0C	; 12
    1986:	80 b9       	out	0x00, r24	; 0
    1988:	86 b7       	in	r24, 0x36	; 54
    198a:	84 60       	ori	r24, 0x04	; 4
    198c:	86 bf       	out	0x36, r24	; 54
    198e:	08 95       	ret

00001990 <TWI_sendStartCondition>:
    1990:	86 b7       	in	r24, 0x36	; 54
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	86 bf       	out	0x36, r24	; 54
    1996:	86 b7       	in	r24, 0x36	; 54
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	86 bf       	out	0x36, r24	; 54
    199c:	06 b6       	in	r0, 0x36	; 54
    199e:	07 fe       	sbrs	r0, 7
    19a0:	fd cf       	rjmp	.-6      	; 0x199c <TWI_sendStartCondition+0xc>
    19a2:	81 b1       	in	r24, 0x01	; 1
    19a4:	88 7f       	andi	r24, 0xF8	; 248
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <TWI_sendStartCondition+0x12>
    19aa:	08 95       	ret

000019ac <TWI_sendRepStartCondition>:
    19ac:	86 b7       	in	r24, 0x36	; 54
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	86 bf       	out	0x36, r24	; 54
    19b2:	86 b7       	in	r24, 0x36	; 54
    19b4:	8f 77       	andi	r24, 0x7F	; 127
    19b6:	86 bf       	out	0x36, r24	; 54
    19b8:	06 b6       	in	r0, 0x36	; 54
    19ba:	07 fe       	sbrs	r0, 7
    19bc:	fd cf       	rjmp	.-6      	; 0x19b8 <TWI_sendRepStartCondition+0xc>
    19be:	81 b1       	in	r24, 0x01	; 1
    19c0:	88 7f       	andi	r24, 0xF8	; 248
    19c2:	80 31       	cpi	r24, 0x10	; 16
    19c4:	e1 f7       	brne	.-8      	; 0x19be <TWI_sendRepStartCondition+0x12>
    19c6:	08 95       	ret

000019c8 <TWI_sendStopCondition>:
    19c8:	86 b7       	in	r24, 0x36	; 54
    19ca:	80 61       	ori	r24, 0x10	; 16
    19cc:	86 bf       	out	0x36, r24	; 54
    19ce:	86 b7       	in	r24, 0x36	; 54
    19d0:	80 68       	ori	r24, 0x80	; 128
    19d2:	86 bf       	out	0x36, r24	; 54
    19d4:	08 95       	ret

000019d6 <TWI_sendSlaveAddWithWrite>:
    19d6:	88 23       	and	r24, r24
    19d8:	94 f0       	brlt	.+36     	; 0x19fe <TWI_sendSlaveAddWithWrite+0x28>
    19da:	88 0f       	add	r24, r24
    19dc:	83 b9       	out	0x03, r24	; 3
    19de:	83 b1       	in	r24, 0x03	; 3
    19e0:	8e 7f       	andi	r24, 0xFE	; 254
    19e2:	83 b9       	out	0x03, r24	; 3
    19e4:	86 b7       	in	r24, 0x36	; 54
    19e6:	8f 7d       	andi	r24, 0xDF	; 223
    19e8:	86 bf       	out	0x36, r24	; 54
    19ea:	86 b7       	in	r24, 0x36	; 54
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	86 bf       	out	0x36, r24	; 54
    19f0:	06 b6       	in	r0, 0x36	; 54
    19f2:	07 fe       	sbrs	r0, 7
    19f4:	fd cf       	rjmp	.-6      	; 0x19f0 <TWI_sendSlaveAddWithWrite+0x1a>
    19f6:	81 b1       	in	r24, 0x01	; 1
    19f8:	88 7f       	andi	r24, 0xF8	; 248
    19fa:	88 31       	cpi	r24, 0x18	; 24
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <TWI_sendSlaveAddWithWrite+0x20>
    19fe:	08 95       	ret

00001a00 <TWI_sendSlaveAddWithRead>:
    1a00:	88 23       	and	r24, r24
    1a02:	94 f0       	brlt	.+36     	; 0x1a28 <TWI_sendSlaveAddWithRead+0x28>
    1a04:	88 0f       	add	r24, r24
    1a06:	83 b9       	out	0x03, r24	; 3
    1a08:	83 b1       	in	r24, 0x03	; 3
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	83 b9       	out	0x03, r24	; 3
    1a0e:	86 b7       	in	r24, 0x36	; 54
    1a10:	8f 7d       	andi	r24, 0xDF	; 223
    1a12:	86 bf       	out	0x36, r24	; 54
    1a14:	86 b7       	in	r24, 0x36	; 54
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	86 bf       	out	0x36, r24	; 54
    1a1a:	06 b6       	in	r0, 0x36	; 54
    1a1c:	07 fe       	sbrs	r0, 7
    1a1e:	fd cf       	rjmp	.-6      	; 0x1a1a <TWI_sendSlaveAddWithRead+0x1a>
    1a20:	81 b1       	in	r24, 0x01	; 1
    1a22:	88 7f       	andi	r24, 0xF8	; 248
    1a24:	80 34       	cpi	r24, 0x40	; 64
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <TWI_sendSlaveAddWithRead+0x20>
    1a28:	08 95       	ret

00001a2a <TWI_sendMasterDataByte>:
    1a2a:	83 b9       	out	0x03, r24	; 3
    1a2c:	86 b7       	in	r24, 0x36	; 54
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	86 bf       	out	0x36, r24	; 54
    1a32:	06 b6       	in	r0, 0x36	; 54
    1a34:	07 fe       	sbrs	r0, 7
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <TWI_sendMasterDataByte+0x8>
    1a38:	81 b1       	in	r24, 0x01	; 1
    1a3a:	88 7f       	andi	r24, 0xF8	; 248
    1a3c:	88 32       	cpi	r24, 0x28	; 40
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <TWI_sendMasterDataByte+0xe>
    1a40:	08 95       	ret

00001a42 <TWI_receiveMasterDataByteWithNack>:
	}
	
}
void TWI_receiveMasterDataByteWithNack(u8* RxData){
    1a42:	fc 01       	movw	r30, r24
	if(RxData!=NULL){
    1a44:	89 2b       	or	r24, r25
    1a46:	61 f0       	breq	.+24     	; 0x1a60 <TWI_receiveMasterDataByteWithNack+0x1e>
		//Clear TWI Interrupt Flag (Read Datasheet)
		SET_BIT(TWCR,TWINT);
    1a48:	96 b7       	in	r25, 0x36	; 54
    1a4a:	90 68       	ori	r25, 0x80	; 128
    1a4c:	96 bf       	out	0x36, r25	; 54
		//Busy wait for the flag
		while(GET_BIT(TWCR,TWINT)==0);
    1a4e:	06 b6       	in	r0, 0x36	; 54
    1a50:	07 fe       	sbrs	r0, 7
    1a52:	fd cf       	rjmp	.-6      	; 0x1a4e <TWI_receiveMasterDataByteWithNack+0xc>
		//Check ACK = Master receive data ACK
		while(TWI_MASTER_DATA_RECIEVE_NACK!=TWI_STATUS_VALUE);
    1a54:	91 b1       	in	r25, 0x01	; 1
    1a56:	98 7f       	andi	r25, 0xF8	; 248
    1a58:	98 35       	cpi	r25, 0x58	; 88
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <TWI_receiveMasterDataByteWithNack+0x12>
		*RxData=TWDR;
    1a5c:	83 b1       	in	r24, 0x03	; 3
    1a5e:	80 83       	st	Z, r24
    1a60:	08 95       	ret

00001a62 <UART_init>:
	if(RxData!=NULL)
	{
		// Busy Wait on Receive Compelete flag
		while(0 == GET_BIT(UCSRA,RXC));
		
		*RxData = UDR;
    1a62:	8b b1       	in	r24, 0x0b	; 11
    1a64:	8d 7f       	andi	r24, 0xFD	; 253
    1a66:	8b b9       	out	0x0b, r24	; 11
    1a68:	87 e6       	ldi	r24, 0x67	; 103
    1a6a:	89 b9       	out	0x09, r24	; 9
    1a6c:	8a b1       	in	r24, 0x0a	; 10
    1a6e:	8b 7f       	andi	r24, 0xFB	; 251
    1a70:	8a b9       	out	0x0a, r24	; 10
    1a72:	86 e8       	ldi	r24, 0x86	; 134
    1a74:	80 bd       	out	0x20, r24	; 32
    1a76:	8a b1       	in	r24, 0x0a	; 10
    1a78:	88 60       	ori	r24, 0x08	; 8
    1a7a:	8a b9       	out	0x0a, r24	; 10
    1a7c:	8a b1       	in	r24, 0x0a	; 10
    1a7e:	80 61       	ori	r24, 0x10	; 16
    1a80:	8a b9       	out	0x0a, r24	; 10
    1a82:	08 95       	ret

00001a84 <UART_TxChar>:
    1a84:	8c b9       	out	0x0c, r24	; 12
    1a86:	5d 9b       	sbis	0x0b, 5	; 11
    1a88:	fe cf       	rjmp	.-4      	; 0x1a86 <UART_TxChar+0x2>
    1a8a:	08 95       	ret

00001a8c <UART_sendString>:
	}
}
void UART_sendString(u8* TxString){
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
	if (TxString!=NULL){
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <UART_sendString+0x14>
    1a96:	0c c0       	rjmp	.+24     	; 0x1ab0 <UART_sendString+0x24>
		u8 counter=0;
		while(TxString[counter]!='\0'){
			UART_TxChar(TxString[counter++]);
    1a98:	cf 5f       	subi	r28, 0xFF	; 255
    1a9a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <UART_sendString+0x18>
    1aa0:	8c 01       	movw	r16, r24
    1aa2:	c0 e0       	ldi	r28, 0x00	; 0
	}
}
void UART_sendString(u8* TxString){
	if (TxString!=NULL){
		u8 counter=0;
		while(TxString[counter]!='\0'){
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	ec 0f       	add	r30, r28
    1aa8:	f1 1d       	adc	r31, r1
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 11       	cpse	r24, r1
    1aae:	f4 cf       	rjmp	.-24     	; 0x1a98 <UART_sendString+0xc>
			UART_TxChar(TxString[counter++]);
		}
	}
}
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <UART_sendNumber>:
void UART_sendNumber(u32 TxNumber){
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	8b 01       	movw	r16, r22
    1ac6:	9c 01       	movw	r18, r24
	u32 reversedNum = 1;
	if(TxNumber == 0)
    1ac8:	67 2b       	or	r22, r23
    1aca:	68 2b       	or	r22, r24
    1acc:	69 2b       	or	r22, r25
    1ace:	49 f5       	brne	.+82     	; 0x1b22 <UART_sendNumber+0x6a>
	{
		UART_TxChar('0');
    1ad0:	80 e3       	ldi	r24, 0x30	; 48
    1ad2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
    1ad6:	45 c0       	rjmp	.+138    	; 0x1b62 <UART_sendNumber+0xaa>
	else
	{
		// reverse the number
		while(TxNumber != 0)
		{
			reversedNum = reversedNum*10 + TxNumber%10;
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	aa 1f       	adc	r26, r26
    1ae2:	bb 1f       	adc	r27, r27
    1ae4:	6c 01       	movw	r12, r24
    1ae6:	7d 01       	movw	r14, r26
    1ae8:	cc 0c       	add	r12, r12
    1aea:	dd 1c       	adc	r13, r13
    1aec:	ee 1c       	adc	r14, r14
    1aee:	ff 1c       	adc	r15, r15
    1af0:	cc 0c       	add	r12, r12
    1af2:	dd 1c       	adc	r13, r13
    1af4:	ee 1c       	adc	r14, r14
    1af6:	ff 1c       	adc	r15, r15
    1af8:	c8 0e       	add	r12, r24
    1afa:	d9 1e       	adc	r13, r25
    1afc:	ea 1e       	adc	r14, r26
    1afe:	fb 1e       	adc	r15, r27
    1b00:	c9 01       	movw	r24, r18
    1b02:	b8 01       	movw	r22, r16
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodsi4>
    1b10:	6c 0d       	add	r22, r12
    1b12:	7d 1d       	adc	r23, r13
    1b14:	8e 1d       	adc	r24, r14
    1b16:	9f 1d       	adc	r25, r15
			TxNumber /= 10;
    1b18:	02 2f       	mov	r16, r18
    1b1a:	13 2f       	mov	r17, r19
    1b1c:	24 2f       	mov	r18, r20
    1b1e:	35 2f       	mov	r19, r21
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <UART_sendNumber+0x72>
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
		UART_TxChar('0');
	}
	else
	{
		// reverse the number
		while(TxNumber != 0)
    1b2a:	01 15       	cp	r16, r1
    1b2c:	11 05       	cpc	r17, r1
    1b2e:	21 05       	cpc	r18, r1
    1b30:	31 05       	cpc	r19, r1
    1b32:	91 f6       	brne	.-92     	; 0x1ad8 <UART_sendNumber+0x20>
		}
		
		
		do
		{
			UART_TxChar(reversedNum%10 + '0');
    1b34:	2a e0       	ldi	r18, 0x0A	; 10
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodsi4>
    1b40:	e2 2e       	mov	r14, r18
    1b42:	f3 2e       	mov	r15, r19
    1b44:	04 2f       	mov	r16, r20
    1b46:	15 2f       	mov	r17, r21
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	86 0f       	add	r24, r22
    1b4c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_TxChar>
			reversedNum /= 10;
    1b50:	6e 2d       	mov	r22, r14
    1b52:	7f 2d       	mov	r23, r15
    1b54:	80 2f       	mov	r24, r16
    1b56:	91 2f       	mov	r25, r17
		}
		while(reversedNum != 1);
    1b58:	61 30       	cpi	r22, 0x01	; 1
    1b5a:	71 05       	cpc	r23, r1
    1b5c:	81 05       	cpc	r24, r1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	49 f7       	brne	.-46     	; 0x1b34 <UART_sendNumber+0x7c>
	}
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	08 95       	ret

00001b70 <__divsf3>:
    1b70:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__divsf3x>
    1b74:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>
    1b78:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1b7c:	58 f0       	brcs	.+22     	; 0x1b94 <__divsf3+0x24>
    1b7e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1b82:	40 f0       	brcs	.+16     	; 0x1b94 <__divsf3+0x24>
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <__divsf3+0x20>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__divsf3+0x24>
    1b8a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_inf>
    1b8e:	51 11       	cpse	r21, r1
    1b90:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1b94:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__fp_nan>

00001b98 <__divsf3x>:
    1b98:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1b9c:	68 f3       	brcs	.-38     	; 0x1b78 <__divsf3+0x8>

00001b9e <__divsf3_pse>:
    1b9e:	99 23       	and	r25, r25
    1ba0:	b1 f3       	breq	.-20     	; 0x1b8e <__divsf3+0x1e>
    1ba2:	55 23       	and	r21, r21
    1ba4:	91 f3       	breq	.-28     	; 0x1b8a <__divsf3+0x1a>
    1ba6:	95 1b       	sub	r25, r21
    1ba8:	55 0b       	sbc	r21, r21
    1baa:	bb 27       	eor	r27, r27
    1bac:	aa 27       	eor	r26, r26
    1bae:	62 17       	cp	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	38 f0       	brcs	.+14     	; 0x1bc4 <__divsf3_pse+0x26>
    1bb6:	9f 5f       	subi	r25, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	44 1f       	adc	r20, r20
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	a9 f3       	breq	.-22     	; 0x1bae <__divsf3_pse+0x10>
    1bc4:	35 d0       	rcall	.+106    	; 0x1c30 <__divsf3_pse+0x92>
    1bc6:	0e 2e       	mov	r0, r30
    1bc8:	3a f0       	brmi	.+14     	; 0x1bd8 <__divsf3_pse+0x3a>
    1bca:	e0 e8       	ldi	r30, 0x80	; 128
    1bcc:	32 d0       	rcall	.+100    	; 0x1c32 <__divsf3_pse+0x94>
    1bce:	91 50       	subi	r25, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	e6 95       	lsr	r30
    1bd4:	00 1c       	adc	r0, r0
    1bd6:	ca f7       	brpl	.-14     	; 0x1bca <__divsf3_pse+0x2c>
    1bd8:	2b d0       	rcall	.+86     	; 0x1c30 <__divsf3_pse+0x92>
    1bda:	fe 2f       	mov	r31, r30
    1bdc:	29 d0       	rcall	.+82     	; 0x1c30 <__divsf3_pse+0x92>
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	bb 1f       	adc	r27, r27
    1be6:	26 17       	cp	r18, r22
    1be8:	37 07       	cpc	r19, r23
    1bea:	48 07       	cpc	r20, r24
    1bec:	ab 07       	cpc	r26, r27
    1bee:	b0 e8       	ldi	r27, 0x80	; 128
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <__divsf3_pse+0x56>
    1bf2:	bb 0b       	sbc	r27, r27
    1bf4:	80 2d       	mov	r24, r0
    1bf6:	bf 01       	movw	r22, r30
    1bf8:	ff 27       	eor	r31, r31
    1bfa:	93 58       	subi	r25, 0x83	; 131
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	3a f0       	brmi	.+14     	; 0x1c0e <__divsf3_pse+0x70>
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	51 05       	cpc	r21, r1
    1c04:	78 f0       	brcs	.+30     	; 0x1c24 <__divsf3_pse+0x86>
    1c06:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_inf>
    1c0a:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c10:	e4 f3       	brlt	.-8      	; 0x1c0a <__divsf3_pse+0x6c>
    1c12:	98 3e       	cpi	r25, 0xE8	; 232
    1c14:	d4 f3       	brlt	.-12     	; 0x1c0a <__divsf3_pse+0x6c>
    1c16:	86 95       	lsr	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	b7 95       	ror	r27
    1c1e:	f7 95       	ror	r31
    1c20:	9f 5f       	subi	r25, 0xFF	; 255
    1c22:	c9 f7       	brne	.-14     	; 0x1c16 <__divsf3_pse+0x78>
    1c24:	88 0f       	add	r24, r24
    1c26:	91 1d       	adc	r25, r1
    1c28:	96 95       	lsr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	97 f9       	bld	r25, 7
    1c2e:	08 95       	ret
    1c30:	e1 e0       	ldi	r30, 0x01	; 1
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	62 17       	cp	r22, r18
    1c3c:	73 07       	cpc	r23, r19
    1c3e:	84 07       	cpc	r24, r20
    1c40:	ba 07       	cpc	r27, r26
    1c42:	20 f0       	brcs	.+8      	; 0x1c4c <__divsf3_pse+0xae>
    1c44:	62 1b       	sub	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	84 0b       	sbc	r24, r20
    1c4a:	ba 0b       	sbc	r27, r26
    1c4c:	ee 1f       	adc	r30, r30
    1c4e:	88 f7       	brcc	.-30     	; 0x1c32 <__divsf3_pse+0x94>
    1c50:	e0 95       	com	r30
    1c52:	08 95       	ret

00001c54 <__fixunssfsi>:
    1c54:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_splitA>
    1c58:	88 f0       	brcs	.+34     	; 0x1c7c <__fixunssfsi+0x28>
    1c5a:	9f 57       	subi	r25, 0x7F	; 127
    1c5c:	98 f0       	brcs	.+38     	; 0x1c84 <__fixunssfsi+0x30>
    1c5e:	b9 2f       	mov	r27, r25
    1c60:	99 27       	eor	r25, r25
    1c62:	b7 51       	subi	r27, 0x17	; 23
    1c64:	b0 f0       	brcs	.+44     	; 0x1c92 <__fixunssfsi+0x3e>
    1c66:	e1 f0       	breq	.+56     	; 0x1ca0 <__fixunssfsi+0x4c>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	1a f0       	brmi	.+6      	; 0x1c78 <__fixunssfsi+0x24>
    1c72:	ba 95       	dec	r27
    1c74:	c9 f7       	brne	.-14     	; 0x1c68 <__fixunssfsi+0x14>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <__fixunssfsi+0x4c>
    1c78:	b1 30       	cpi	r27, 0x01	; 1
    1c7a:	91 f0       	breq	.+36     	; 0x1ca0 <__fixunssfsi+0x4c>
    1c7c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_zero>
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	08 95       	ret
    1c84:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_zero>
    1c88:	67 2f       	mov	r22, r23
    1c8a:	78 2f       	mov	r23, r24
    1c8c:	88 27       	eor	r24, r24
    1c8e:	b8 5f       	subi	r27, 0xF8	; 248
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <__fixunssfsi+0x4c>
    1c92:	b9 3f       	cpi	r27, 0xF9	; 249
    1c94:	cc f3       	brlt	.-14     	; 0x1c88 <__fixunssfsi+0x34>
    1c96:	86 95       	lsr	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b3 95       	inc	r27
    1c9e:	d9 f7       	brne	.-10     	; 0x1c96 <__fixunssfsi+0x42>
    1ca0:	3e f4       	brtc	.+14     	; 0x1cb0 <__fixunssfsi+0x5c>
    1ca2:	90 95       	com	r25
    1ca4:	80 95       	com	r24
    1ca6:	70 95       	com	r23
    1ca8:	61 95       	neg	r22
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__floatunsisf>:
    1cb2:	e8 94       	clt
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <__floatsisf+0x12>

00001cb6 <__floatsisf>:
    1cb6:	97 fb       	bst	r25, 7
    1cb8:	3e f4       	brtc	.+14     	; 0x1cc8 <__floatsisf+0x12>
    1cba:	90 95       	com	r25
    1cbc:	80 95       	com	r24
    1cbe:	70 95       	com	r23
    1cc0:	61 95       	neg	r22
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	99 23       	and	r25, r25
    1cca:	a9 f0       	breq	.+42     	; 0x1cf6 <__floatsisf+0x40>
    1ccc:	f9 2f       	mov	r31, r25
    1cce:	96 e9       	ldi	r25, 0x96	; 150
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	93 95       	inc	r25
    1cd4:	f6 95       	lsr	r31
    1cd6:	87 95       	ror	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b7 95       	ror	r27
    1cde:	f1 11       	cpse	r31, r1
    1ce0:	f8 cf       	rjmp	.-16     	; 0x1cd2 <__floatsisf+0x1c>
    1ce2:	fa f4       	brpl	.+62     	; 0x1d22 <__floatsisf+0x6c>
    1ce4:	bb 0f       	add	r27, r27
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <__floatsisf+0x36>
    1ce8:	60 ff       	sbrs	r22, 0
    1cea:	1b c0       	rjmp	.+54     	; 0x1d22 <__floatsisf+0x6c>
    1cec:	6f 5f       	subi	r22, 0xFF	; 255
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <__floatsisf+0x6c>
    1cf6:	88 23       	and	r24, r24
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <__floatsisf+0x48>
    1cfa:	96 e9       	ldi	r25, 0x96	; 150
    1cfc:	11 c0       	rjmp	.+34     	; 0x1d20 <__floatsisf+0x6a>
    1cfe:	77 23       	and	r23, r23
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <__floatsisf+0x54>
    1d02:	9e e8       	ldi	r25, 0x8E	; 142
    1d04:	87 2f       	mov	r24, r23
    1d06:	76 2f       	mov	r23, r22
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <__floatsisf+0x5e>
    1d0a:	66 23       	and	r22, r22
    1d0c:	71 f0       	breq	.+28     	; 0x1d2a <__floatsisf+0x74>
    1d0e:	96 e8       	ldi	r25, 0x86	; 134
    1d10:	86 2f       	mov	r24, r22
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	2a f0       	brmi	.+10     	; 0x1d22 <__floatsisf+0x6c>
    1d18:	9a 95       	dec	r25
    1d1a:	66 0f       	add	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	da f7       	brpl	.-10     	; 0x1d18 <__floatsisf+0x62>
    1d22:	88 0f       	add	r24, r24
    1d24:	96 95       	lsr	r25
    1d26:	87 95       	ror	r24
    1d28:	97 f9       	bld	r25, 7
    1d2a:	08 95       	ret

00001d2c <__fp_inf>:
    1d2c:	97 f9       	bld	r25, 7
    1d2e:	9f 67       	ori	r25, 0x7F	; 127
    1d30:	80 e8       	ldi	r24, 0x80	; 128
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	08 95       	ret

00001d38 <__fp_nan>:
    1d38:	9f ef       	ldi	r25, 0xFF	; 255
    1d3a:	80 ec       	ldi	r24, 0xC0	; 192
    1d3c:	08 95       	ret

00001d3e <__fp_pscA>:
    1d3e:	00 24       	eor	r0, r0
    1d40:	0a 94       	dec	r0
    1d42:	16 16       	cp	r1, r22
    1d44:	17 06       	cpc	r1, r23
    1d46:	18 06       	cpc	r1, r24
    1d48:	09 06       	cpc	r0, r25
    1d4a:	08 95       	ret

00001d4c <__fp_pscB>:
    1d4c:	00 24       	eor	r0, r0
    1d4e:	0a 94       	dec	r0
    1d50:	12 16       	cp	r1, r18
    1d52:	13 06       	cpc	r1, r19
    1d54:	14 06       	cpc	r1, r20
    1d56:	05 06       	cpc	r0, r21
    1d58:	08 95       	ret

00001d5a <__fp_round>:
    1d5a:	09 2e       	mov	r0, r25
    1d5c:	03 94       	inc	r0
    1d5e:	00 0c       	add	r0, r0
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <__fp_round+0xc>
    1d62:	88 23       	and	r24, r24
    1d64:	52 f0       	brmi	.+20     	; 0x1d7a <__fp_round+0x20>
    1d66:	bb 0f       	add	r27, r27
    1d68:	40 f4       	brcc	.+16     	; 0x1d7a <__fp_round+0x20>
    1d6a:	bf 2b       	or	r27, r31
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <__fp_round+0x18>
    1d6e:	60 ff       	sbrs	r22, 0
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <__fp_round+0x20>
    1d72:	6f 5f       	subi	r22, 0xFF	; 255
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	8f 4f       	sbci	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	08 95       	ret

00001d7c <__fp_split3>:
    1d7c:	57 fd       	sbrc	r21, 7
    1d7e:	90 58       	subi	r25, 0x80	; 128
    1d80:	44 0f       	add	r20, r20
    1d82:	55 1f       	adc	r21, r21
    1d84:	59 f0       	breq	.+22     	; 0x1d9c <__fp_splitA+0x10>
    1d86:	5f 3f       	cpi	r21, 0xFF	; 255
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <__fp_splitA+0x1a>
    1d8a:	47 95       	ror	r20

00001d8c <__fp_splitA>:
    1d8c:	88 0f       	add	r24, r24
    1d8e:	97 fb       	bst	r25, 7
    1d90:	99 1f       	adc	r25, r25
    1d92:	61 f0       	breq	.+24     	; 0x1dac <__fp_splitA+0x20>
    1d94:	9f 3f       	cpi	r25, 0xFF	; 255
    1d96:	79 f0       	breq	.+30     	; 0x1db6 <__fp_splitA+0x2a>
    1d98:	87 95       	ror	r24
    1d9a:	08 95       	ret
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	14 06       	cpc	r1, r20
    1da2:	55 1f       	adc	r21, r21
    1da4:	f2 cf       	rjmp	.-28     	; 0x1d8a <__fp_split3+0xe>
    1da6:	46 95       	lsr	r20
    1da8:	f1 df       	rcall	.-30     	; 0x1d8c <__fp_splitA>
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <__fp_splitA+0x30>
    1dac:	16 16       	cp	r1, r22
    1dae:	17 06       	cpc	r1, r23
    1db0:	18 06       	cpc	r1, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	f1 cf       	rjmp	.-30     	; 0x1d98 <__fp_splitA+0xc>
    1db6:	86 95       	lsr	r24
    1db8:	71 05       	cpc	r23, r1
    1dba:	61 05       	cpc	r22, r1
    1dbc:	08 94       	sec
    1dbe:	08 95       	ret

00001dc0 <__fp_zero>:
    1dc0:	e8 94       	clt

00001dc2 <__fp_szero>:
    1dc2:	bb 27       	eor	r27, r27
    1dc4:	66 27       	eor	r22, r22
    1dc6:	77 27       	eor	r23, r23
    1dc8:	cb 01       	movw	r24, r22
    1dca:	97 f9       	bld	r25, 7
    1dcc:	08 95       	ret

00001dce <__mulsf3>:
    1dce:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__mulsf3x>
    1dd2:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_round>
    1dd6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscA>
    1dda:	38 f0       	brcs	.+14     	; 0x1dea <__mulsf3+0x1c>
    1ddc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscB>
    1de0:	20 f0       	brcs	.+8      	; 0x1dea <__mulsf3+0x1c>
    1de2:	95 23       	and	r25, r21
    1de4:	11 f0       	breq	.+4      	; 0x1dea <__mulsf3+0x1c>
    1de6:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_inf>
    1dea:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__fp_nan>
    1dee:	11 24       	eor	r1, r1
    1df0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>

00001df4 <__mulsf3x>:
    1df4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_split3>
    1df8:	70 f3       	brcs	.-36     	; 0x1dd6 <__mulsf3+0x8>

00001dfa <__mulsf3_pse>:
    1dfa:	95 9f       	mul	r25, r21
    1dfc:	c1 f3       	breq	.-16     	; 0x1dee <__mulsf3+0x20>
    1dfe:	95 0f       	add	r25, r21
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	55 1f       	adc	r21, r21
    1e04:	62 9f       	mul	r22, r18
    1e06:	f0 01       	movw	r30, r0
    1e08:	72 9f       	mul	r23, r18
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	f0 0d       	add	r31, r0
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	63 9f       	mul	r22, r19
    1e12:	aa 27       	eor	r26, r26
    1e14:	f0 0d       	add	r31, r0
    1e16:	b1 1d       	adc	r27, r1
    1e18:	aa 1f       	adc	r26, r26
    1e1a:	64 9f       	mul	r22, r20
    1e1c:	66 27       	eor	r22, r22
    1e1e:	b0 0d       	add	r27, r0
    1e20:	a1 1d       	adc	r26, r1
    1e22:	66 1f       	adc	r22, r22
    1e24:	82 9f       	mul	r24, r18
    1e26:	22 27       	eor	r18, r18
    1e28:	b0 0d       	add	r27, r0
    1e2a:	a1 1d       	adc	r26, r1
    1e2c:	62 1f       	adc	r22, r18
    1e2e:	73 9f       	mul	r23, r19
    1e30:	b0 0d       	add	r27, r0
    1e32:	a1 1d       	adc	r26, r1
    1e34:	62 1f       	adc	r22, r18
    1e36:	83 9f       	mul	r24, r19
    1e38:	a0 0d       	add	r26, r0
    1e3a:	61 1d       	adc	r22, r1
    1e3c:	22 1f       	adc	r18, r18
    1e3e:	74 9f       	mul	r23, r20
    1e40:	33 27       	eor	r19, r19
    1e42:	a0 0d       	add	r26, r0
    1e44:	61 1d       	adc	r22, r1
    1e46:	23 1f       	adc	r18, r19
    1e48:	84 9f       	mul	r24, r20
    1e4a:	60 0d       	add	r22, r0
    1e4c:	21 1d       	adc	r18, r1
    1e4e:	82 2f       	mov	r24, r18
    1e50:	76 2f       	mov	r23, r22
    1e52:	6a 2f       	mov	r22, r26
    1e54:	11 24       	eor	r1, r1
    1e56:	9f 57       	subi	r25, 0x7F	; 127
    1e58:	50 40       	sbci	r21, 0x00	; 0
    1e5a:	9a f0       	brmi	.+38     	; 0x1e82 <__mulsf3_pse+0x88>
    1e5c:	f1 f0       	breq	.+60     	; 0x1e9a <__mulsf3_pse+0xa0>
    1e5e:	88 23       	and	r24, r24
    1e60:	4a f0       	brmi	.+18     	; 0x1e74 <__mulsf3_pse+0x7a>
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	bb 1f       	adc	r27, r27
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	91 50       	subi	r25, 0x01	; 1
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	a9 f7       	brne	.-22     	; 0x1e5e <__mulsf3_pse+0x64>
    1e74:	9e 3f       	cpi	r25, 0xFE	; 254
    1e76:	51 05       	cpc	r21, r1
    1e78:	80 f0       	brcs	.+32     	; 0x1e9a <__mulsf3_pse+0xa0>
    1e7a:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_inf>
    1e7e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_szero>
    1e82:	5f 3f       	cpi	r21, 0xFF	; 255
    1e84:	e4 f3       	brlt	.-8      	; 0x1e7e <__mulsf3_pse+0x84>
    1e86:	98 3e       	cpi	r25, 0xE8	; 232
    1e88:	d4 f3       	brlt	.-12     	; 0x1e7e <__mulsf3_pse+0x84>
    1e8a:	86 95       	lsr	r24
    1e8c:	77 95       	ror	r23
    1e8e:	67 95       	ror	r22
    1e90:	b7 95       	ror	r27
    1e92:	f7 95       	ror	r31
    1e94:	e7 95       	ror	r30
    1e96:	9f 5f       	subi	r25, 0xFF	; 255
    1e98:	c1 f7       	brne	.-16     	; 0x1e8a <__mulsf3_pse+0x90>
    1e9a:	fe 2b       	or	r31, r30
    1e9c:	88 0f       	add	r24, r24
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	97 f9       	bld	r25, 7
    1ea6:	08 95       	ret

00001ea8 <__udivmodsi4>:
    1ea8:	a1 e2       	ldi	r26, 0x21	; 33
    1eaa:	1a 2e       	mov	r1, r26
    1eac:	aa 1b       	sub	r26, r26
    1eae:	bb 1b       	sub	r27, r27
    1eb0:	fd 01       	movw	r30, r26
    1eb2:	0d c0       	rjmp	.+26     	; 0x1ece <__udivmodsi4_ep>

00001eb4 <__udivmodsi4_loop>:
    1eb4:	aa 1f       	adc	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	ee 1f       	adc	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	a2 17       	cp	r26, r18
    1ebe:	b3 07       	cpc	r27, r19
    1ec0:	e4 07       	cpc	r30, r20
    1ec2:	f5 07       	cpc	r31, r21
    1ec4:	20 f0       	brcs	.+8      	; 0x1ece <__udivmodsi4_ep>
    1ec6:	a2 1b       	sub	r26, r18
    1ec8:	b3 0b       	sbc	r27, r19
    1eca:	e4 0b       	sbc	r30, r20
    1ecc:	f5 0b       	sbc	r31, r21

00001ece <__udivmodsi4_ep>:
    1ece:	66 1f       	adc	r22, r22
    1ed0:	77 1f       	adc	r23, r23
    1ed2:	88 1f       	adc	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	1a 94       	dec	r1
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <__udivmodsi4_loop>
    1eda:	60 95       	com	r22
    1edc:	70 95       	com	r23
    1ede:	80 95       	com	r24
    1ee0:	90 95       	com	r25
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	bd 01       	movw	r22, r26
    1ee8:	cf 01       	movw	r24, r30
    1eea:	08 95       	ret

00001eec <_exit>:
    1eec:	f8 94       	cli

00001eee <__stop_program>:
    1eee:	ff cf       	rjmp	.-2      	; 0x1eee <__stop_program>
